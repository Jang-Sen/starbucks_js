var COMPODOC_SEARCH_INDEX = {
  index: {
    version: '2.3.9',
    fields: ['title', 'body'],
    fieldVectors: [
      ['title/controllers/AppController.html', [0, 1.654, 1, 2.417]],
      [
        'body/controllers/AppController.html',
        [
          0, 2.633, 1, 3.847, 2, 2.088, 3, 0.251, 4, 0.219, 5, 0.219, 6, 3.808,
          7, 0.867, 8, 2.062, 9, 5.524, 10, 2.088, 11, 0.022, 12, 1.161, 13,
          4.466, 14, 1.635, 15, 1.55, 16, 0.445, 17, 0.718, 18, 3.56, 19, 3.808,
          20, 0.251, 21, 0.013, 22, 2.577, 23, 1.841, 24, 1.734, 25, 4.466, 26,
          0.017, 27, 0.017,
        ],
      ],
      ['title/modules/AppModule.html', [28, 1.154, 29, 2.417]],
      [
        'body/modules/AppModule.html',
        [
          1, 3.165, 2, 1.811, 3, 0.146, 4, 0.127, 5, 0.127, 11, 0.022, 16,
          0.512, 17, 0.417, 18, 3.326, 19, 2.214, 20, 0.146, 21, 0.008, 26,
          0.012, 27, 0.012, 28, 1.511, 29, 4.702, 30, 1.139, 31, 1.297, 32,
          1.498, 33, 1.498, 34, 1.297, 35, 2.673, 36, 1.498, 37, 2.214, 38,
          2.214, 39, 2.214, 40, 3.603, 41, 3.603, 42, 3.326, 43, 3.603, 44,
          3.603, 45, 3.326, 46, 2.235, 47, 1.498, 48, 1.391, 49, 2.597, 50,
          2.075, 51, 1.623, 52, 1.008, 53, 2.597, 54, 2.214, 55, 2.597, 56,
          2.597, 57, 2.214, 58, 2.597, 59, 2.214, 60, 2.597, 61, 2.597, 62,
          2.597, 63, 2.597, 64, 2.597, 65, 2.597, 66, 6.884, 67, 2.597, 68,
          2.597, 69, 2.597, 70, 4.634, 71, 2.597, 72, 2.597, 73, 2.597, 74,
          2.597, 75, 2.597, 76, 2.597, 77, 2.597, 78, 2.597, 79, 2.597, 80,
          2.597, 81, 2.597, 82, 2.597, 83, 2.597, 84, 2.597, 85, 2.597, 86,
          2.597, 87, 2.597, 88, 2.597, 89, 2.597,
        ],
      ],
      ['title/injectables/AppService.html', [18, 2.042, 90, 0.43]],
      [
        'body/injectables/AppService.html',
        [
          3, 0.265, 4, 0.231, 5, 0.231, 7, 0.913, 8, 2.13, 9, 5.627, 11, 0.022,
          12, 1.223, 14, 1.722, 15, 1.601, 16, 0.372, 17, 0.756, 18, 3.357, 20,
          0.265, 21, 0.014, 24, 1.826, 26, 0.018, 27, 0.018, 90, 0.707, 91,
          1.449, 92, 4.01, 93, 4.704, 94, 4.704, 95, 4.704,
        ],
      ],
      ['title/classes/Auth.html', [21, 0.01, 96, 2.212]],
      [
        'body/classes/Auth.html',
        [
          3, 0.301, 4, 0.262, 5, 0.262, 11, 0.02, 20, 0.301, 21, 0.016, 26,
          0.019, 27, 0.019, 96, 3.93, 97, 2.346, 98, 4.561,
        ],
      ],
      ['title/controllers/AuthController.html', [0, 1.654, 99, 2.417]],
      [
        'body/controllers/AuthController.html',
        [
          0, 0.704, 2, 0.704, 3, 0.085, 4, 0.074, 5, 0.074, 7, 0.292, 8, 0.92,
          10, 2.534, 11, 0.022, 12, 1.409, 14, 1.984, 15, 0.891, 16, 0.44, 17,
          0.242, 20, 0.085, 21, 0.004, 22, 0.868, 23, 0.621, 24, 2.104, 26,
          0.008, 27, 0.008, 96, 0.941, 99, 1.717, 100, 1.283, 101, 1.137, 102,
          2.607, 103, 2.514, 104, 2.514, 105, 3.781, 106, 2.514, 107, 3.781,
          108, 2.514, 109, 2.143, 110, 3.781, 111, 2.514, 112, 2.514, 113,
          1.505, 114, 4.152, 115, 1.505, 116, 1.505, 117, 1.989, 118, 1.765,
          119, 1.217, 120, 1.666, 121, 5.567, 122, 2.903, 123, 1.505, 124,
          2.514, 125, 1.505, 126, 1.102, 127, 1.505, 128, 1.505, 129, 1.505,
          130, 1.505, 131, 1.505, 132, 1.505, 133, 1.505, 134, 1.505, 135,
          1.505, 136, 1.505, 137, 1.505, 138, 1.505, 139, 2.024, 140, 1.505,
          141, 1.505, 142, 1.505, 143, 1.505, 144, 1.505, 145, 1.505, 146,
          1.505, 147, 2.434, 148, 1.505, 149, 1.505, 150, 1.572, 151, 1.283,
          152, 0.941, 153, 1.283, 154, 1.505, 155, 1.028, 156, 1.717, 157,
          1.734, 158, 1.137, 159, 1.505, 160, 1.028, 161, 1.505, 162, 3.781,
          163, 1.028, 164, 1.505, 165, 2.76, 166, 1.283, 167, 0.868, 168, 1.283,
          169, 1.028, 170, 1.505, 171, 1.028, 172, 1.505, 173, 1.028, 174,
          1.505, 175, 1.505, 176, 1.505, 177, 4.622, 178, 1.505, 179, 1.505,
          180, 2.623, 181, 1.984, 182, 1.335, 183, 1.505, 184, 1.505, 185,
          1.505, 186, 1.505, 187, 1.505, 188, 4.205, 189, 5.055, 190, 3.781,
          191, 1.505, 192, 1.505, 193, 1.505, 194, 2.514, 195, 3.237, 196,
          1.505, 197, 1.505, 198, 1.505, 199, 2.514, 200, 1.505, 201, 1.505,
          202, 1.505, 203, 2.514, 204, 1.505, 205, 1.505, 206, 1.505, 207,
          1.505,
        ],
      ],
      ['title/modules/AuthModule.html', [28, 1.154, 40, 2.212]],
      [
        'body/modules/AuthModule.html',
        [
          2, 1.946, 3, 0.161, 4, 0.14, 5, 0.14, 11, 0.022, 16, 0.529, 17, 0.46,
          20, 0.161, 21, 0.008, 26, 0.013, 27, 0.013, 28, 1.6, 30, 1.256, 31,
          1.431, 32, 1.652, 33, 1.652, 34, 1.431, 35, 2.83, 36, 1.652, 40, 4.4,
          42, 3.444, 45, 3.444, 46, 2.402, 47, 1.652, 48, 1.534, 50, 2.23, 51,
          2.603, 52, 1.112, 57, 2.442, 59, 2.442, 99, 3.351, 157, 3.198, 158,
          2.164, 208, 2.442, 209, 2.864, 210, 2.442, 211, 3.732, 212, 3.732,
          213, 3.732, 214, 3.732, 215, 3.732, 216, 2.864, 217, 2.864, 218,
          2.864, 219, 2.164, 220, 2.864, 221, 5.386, 222, 2.864, 223, 2.864,
          224, 2.864, 225, 2.864, 226, 2.864,
        ],
      ],
      ['title/injectables/AuthService.html', [90, 0.43, 157, 1.895]],
      [
        'body/injectables/AuthService.html',
        [
          3, 0.094, 4, 0.082, 5, 0.082, 7, 0.326, 8, 1.007, 11, 0.022, 12,
          1.316, 14, 1.755, 15, 1.549, 16, 0.465, 17, 0.27, 20, 0.094, 21,
          0.005, 23, 1.667, 24, 1.861, 26, 0.008, 27, 0.008, 52, 0.652, 90,
          0.334, 91, 0.517, 102, 2.286, 109, 2.346, 117, 1.977, 118, 1.755, 119,
          1.111, 120, 1.656, 122, 2.166, 126, 1.774, 139, 2.528, 147, 2.166,
          150, 2.186, 152, 1.05, 155, 1.147, 156, 1.88, 157, 1.474, 168, 1.432,
          180, 2.02, 181, 1.48, 182, 1.977, 219, 1.269, 227, 1.432, 228, 2.079,
          229, 4.044, 230, 2.388, 231, 2.752, 232, 2.752, 233, 2.752, 234,
          1.286, 235, 0.969, 236, 2.395, 237, 2.087, 238, 2.921, 239, 5.063,
          240, 3.497, 241, 3.372, 242, 1.679, 243, 2.079, 244, 1.679, 245,
          1.679, 246, 2.752, 247, 1.679, 248, 2.346, 249, 2.752, 250, 1.679,
          251, 2.752, 252, 1.679, 253, 2.752, 254, 1.679, 255, 2.388, 256,
          1.269, 257, 1.432, 258, 1.269, 259, 0.899, 260, 1.432, 261, 1.72, 262,
          1.432, 263, 1.068, 264, 0.692, 265, 1.679, 266, 1.432, 267, 1.269,
          268, 2.229, 269, 1.679, 270, 1.147, 271, 1.269, 272, 2.752, 273,
          1.432, 274, 1.679, 275, 2.752, 276, 1.147, 277, 1.679, 278, 1.588,
          279, 1.474, 280, 1.679, 281, 1.432, 282, 2.346, 283, 1.679, 284,
          1.679, 285, 1.679, 286, 2.752, 287, 2.752, 288, 2.752, 289, 1.147,
          290, 1.432, 291, 1.679, 292, 1.679, 293, 1.679, 294, 1.679, 295,
          1.679, 296, 4.044, 297, 1.679, 298, 1.679,
        ],
      ],
      ['title/classes/BaseEntity.html', [21, 0.01, 299, 2.212]],
      [
        'body/classes/BaseEntity.html',
        [
          3, 0.211, 4, 0.184, 5, 0.184, 7, 0.73, 10, 2.835, 11, 0.021, 12,
          1.577, 15, 1.385, 16, 0.297, 20, 0.211, 21, 0.011, 26, 0.015, 27,
          0.015, 97, 1.649, 119, 1.406, 230, 4.797, 299, 3.148, 300, 3.205, 301,
          2.076, 302, 5.679, 303, 5.679, 304, 3.879, 305, 5.679, 306, 6.509,
          307, 5.679, 308, 3.759, 309, 5.679, 310, 3.759, 311, 5.036, 312,
          3.759, 313, 5.679, 314, 3.759, 315, 3.759, 316, 2.169, 317, 3.759,
        ],
      ],
      ['title/classes/CreateAuthDto.html', [21, 0.01, 318, 2.417]],
      [
        'body/classes/CreateAuthDto.html',
        [
          3, 0.299, 4, 0.261, 5, 0.261, 11, 0.02, 20, 0.299, 21, 0.016, 26,
          0.019, 27, 0.019, 97, 2.333, 318, 4.281, 319, 4.536, 320, 4.02,
        ],
      ],
      ['title/classes/CreateProductDto.html', [21, 0.01, 321, 2.042]],
      [
        'body/classes/CreateProductDto.html',
        [
          3, 0.2, 4, 0.174, 5, 0.174, 7, 0.69, 10, 2.9, 11, 0.022, 12, 1.612,
          15, 1.835, 16, 0.383, 20, 0.2, 21, 0.014, 26, 0.015, 27, 0.015, 97,
          1.558, 118, 2.02, 119, 1.438, 167, 2.05, 301, 1.999, 321, 2.797, 322,
          5.459, 323, 2.685, 324, 4.704, 325, 3.769, 326, 4.704, 327, 4.704,
          328, 4.478, 329, 3.554, 330, 3.554, 331, 3.554, 332, 3.311, 333, 3.03,
          334, 3.554, 335, 3.554, 336, 4.837, 337, 4.133, 338, 4.687, 339,
          2.427,
        ],
      ],
      ['title/classes/CreateUserDto.html', [21, 0.01, 147, 1.895]],
      [
        'body/classes/CreateUserDto.html',
        [
          3, 0.182, 4, 0.159, 5, 0.159, 7, 0.628, 10, 2.906, 11, 0.022, 12,
          1.616, 15, 1.793, 16, 0.415, 20, 0.182, 21, 0.013, 26, 0.014, 27,
          0.014, 97, 1.419, 119, 1.441, 120, 2.252, 126, 2.302, 147, 2.433, 167,
          1.866, 263, 2.414, 264, 1.334, 301, 1.873, 328, 3.432, 332, 3.103,
          333, 2.758, 336, 4.531, 337, 3.873, 338, 4.825, 339, 2.21, 340, 5.445,
          341, 2.21, 342, 3.282, 343, 4.476, 344, 3.282, 345, 3.029, 346, 2.758,
          347, 3.235, 348, 3.235, 349, 3.235, 350, 3.235, 351, 3.235, 352,
          3.235, 353, 3.873,
        ],
      ],
      ['title/modules/DbModule.html', [28, 1.154, 41, 2.212]],
      [
        'body/modules/DbModule.html',
        [
          3, 0.233, 4, 0.203, 5, 0.203, 11, 0.022, 16, 0.471, 17, 0.666, 20,
          0.233, 21, 0.012, 26, 0.016, 27, 0.016, 28, 1.751, 30, 1.817, 41,
          3.356, 50, 2.876, 51, 3.356, 52, 1.609, 119, 0.96, 236, 2.975, 256,
          3.13, 342, 2.59, 345, 2.39, 354, 4.143, 355, 3.13, 356, 2.39, 357,
          4.143, 358, 3.533, 359, 4.143, 360, 4.143, 361, 3.533, 362, 4.143,
          363, 4.143, 364, 4.143, 365, 3.533, 366, 4.143, 367, 4.143, 368,
          4.143, 369, 2.83, 370, 4.143, 371, 4.143, 372, 4.143, 373, 3.667, 374,
          4.143,
        ],
      ],
      ['title/modules/EmailModule.html', [28, 1.154, 42, 2.042]],
      [
        'body/modules/EmailModule.html',
        [
          3, 0.231, 4, 0.201, 5, 0.201, 11, 0.022, 16, 0.469, 17, 0.66, 20,
          0.231, 21, 0.012, 26, 0.016, 27, 0.016, 28, 1.935, 30, 1.802, 31,
          2.052, 32, 2.37, 33, 2.37, 34, 2.052, 35, 3.422, 36, 3.422, 42, 3.919,
          46, 3.08, 47, 2.37, 48, 2.201, 50, 2.201, 51, 3.338, 52, 1.595, 238,
          4.106, 260, 3.503, 375, 3.503, 376, 3.503, 377, 3.503, 378, 4.108,
        ],
      ],
      ['title/injectables/EmailService.html', [90, 0.43, 238, 2.042]],
      [
        'body/injectables/EmailService.html',
        [
          3, 0.199, 4, 0.174, 5, 0.174, 7, 0.687, 8, 1.77, 11, 0.022, 12, 1.431,
          14, 1.296, 16, 0.468, 17, 0.569, 20, 0.199, 21, 0.01, 22, 2.043, 23,
          1.46, 24, 1.375, 26, 0.015, 27, 0.015, 52, 1.375, 90, 0.588, 91,
          1.091, 96, 2.213, 117, 1.994, 118, 1.77, 119, 1.276, 120, 1.67, 181,
          1.296, 234, 1.655, 235, 2.043, 236, 3.194, 238, 2.79, 268, 2.751, 282,
          3.019, 301, 1.994, 379, 3.019, 380, 6.395, 381, 4.836, 382, 4.836,
          383, 4.836, 384, 5.507, 385, 3.541, 386, 3.541, 387, 4.836, 388,
          3.019, 389, 3.541, 390, 3.541, 391, 3.541, 392, 3.541, 393, 3.541,
          394, 3.541, 395, 3.541,
        ],
      ],
      ['title/injectables/GoogleAuthGuard.html', [90, 0.43, 169, 2.417]],
      [
        'body/injectables/GoogleAuthGuard.html',
        [
          3, 0.27, 4, 0.235, 5, 0.235, 11, 0.022, 16, 0.504, 17, 0.771, 20,
          0.27, 21, 0.014, 26, 0.018, 27, 0.018, 90, 0.716, 91, 1.478, 169,
          4.022, 263, 1.862, 264, 1.977, 396, 4.089, 397, 2.998, 398, 1.814,
          399, 5.888, 400, 2.998, 401, 1.977,
        ],
      ],
      ['title/injectables/GoogleAuthStrategy.html', [90, 0.43, 211, 2.212]],
      [
        'body/injectables/GoogleAuthStrategy.html',
        [
          3, 0.14, 4, 0.122, 5, 0.122, 7, 0.485, 8, 1.377, 11, 0.022, 12, 0.978,
          14, 0.914, 15, 1.563, 16, 0.449, 17, 0.401, 20, 0.14, 21, 0.007, 23,
          1.551, 26, 0.011, 27, 0.011, 52, 0.969, 90, 0.457, 91, 0.769, 102,
          1.757, 117, 1.551, 118, 1.377, 119, 0.872, 120, 1.299, 126, 2.37, 152,
          1.561, 180, 2.261, 181, 1.377, 182, 1.551, 211, 2.352, 234, 1.758,
          235, 1.44, 236, 2.837, 237, 2.43, 255, 2.569, 259, 1.337, 263, 2.098,
          264, 1.029, 268, 1.879, 270, 1.705, 276, 1.705, 278, 1.44, 279, 1.337,
          289, 2.569, 344, 1.561, 345, 1.44, 398, 1.159, 401, 1.029, 402, 3.859,
          403, 1.561, 404, 2.829, 405, 2.829, 406, 3.762, 407, 2.829, 408,
          1.886, 409, 1.886, 410, 3.42, 411, 4.083, 412, 3.42, 413, 5.038, 414,
          2.497, 415, 1.44, 416, 1.886, 417, 2.129, 418, 1.561, 419, 1.886, 420,
          2.497, 421, 2.129, 422, 2.497, 423, 1.886, 424, 2.497, 425, 2.497,
          426, 3.207, 427, 3.762, 428, 1.705, 429, 2.842, 430, 1.886, 431,
          3.207, 432, 2.842, 433, 1.705, 434, 1.705, 435, 1.886, 436, 1.886,
          437, 2.842,
        ],
      ],
      ['title/injectables/KakaoAuthGuard.html', [90, 0.43, 171, 2.417]],
      [
        'body/injectables/KakaoAuthGuard.html',
        [
          3, 0.27, 4, 0.235, 5, 0.235, 11, 0.022, 16, 0.504, 17, 0.771, 20,
          0.27, 21, 0.014, 26, 0.018, 27, 0.018, 90, 0.716, 91, 1.478, 171,
          4.022, 263, 1.862, 264, 1.977, 397, 2.998, 398, 1.814, 400, 2.998,
          401, 1.977, 438, 4.089, 439, 5.888,
        ],
      ],
      ['title/injectables/KakaoAuthStrategy.html', [90, 0.43, 212, 2.212]],
      [
        'body/injectables/KakaoAuthStrategy.html',
        [
          3, 0.145, 4, 0.126, 5, 0.126, 7, 0.5, 8, 1.41, 11, 0.022, 12, 1.001,
          14, 0.943, 15, 1.581, 16, 0.454, 17, 0.414, 20, 0.145, 21, 0.008, 23,
          1.588, 26, 0.012, 27, 0.012, 52, 1, 90, 0.468, 91, 0.794, 102, 1.79,
          117, 1.588, 118, 1.41, 119, 0.892, 120, 1.33, 126, 2.244, 152, 1.61,
          180, 2.736, 181, 1.41, 182, 1.588, 212, 2.407, 234, 1.8, 235, 1.486,
          236, 2.871, 237, 2.456, 255, 2.63, 259, 1.38, 263, 2.127, 264, 1.062,
          268, 1.924, 270, 1.76, 276, 1.76, 278, 1.486, 279, 1.38, 289, 2.63,
          344, 1.61, 345, 2.661, 398, 1.187, 401, 1.062, 403, 1.61, 404, 2.883,
          405, 2.883, 407, 2.883, 408, 1.946, 409, 1.946, 410, 3.484, 411,
          3.866, 412, 3.484, 415, 1.486, 418, 1.61, 419, 1.946, 423, 1.946, 428,
          1.76, 429, 2.91, 430, 1.946, 431, 3.283, 432, 2.91, 433, 1.76, 434,
          1.76, 435, 1.946, 436, 1.946, 437, 2.91, 440, 3.932, 441, 3.851, 442,
          2.576, 443, 1.946, 444, 2.576, 445, 2.576, 446, 3.283, 447, 2.576,
          448, 2.576,
        ],
      ],
      ['title/injectables/LocalAuthGuard.html', [90, 0.43, 160, 2.417]],
      [
        'body/injectables/LocalAuthGuard.html',
        [
          3, 0.27, 4, 0.235, 5, 0.235, 11, 0.022, 16, 0.504, 17, 0.771, 20,
          0.27, 21, 0.014, 26, 0.018, 27, 0.018, 90, 0.716, 91, 1.478, 160,
          4.022, 263, 1.862, 264, 1.977, 397, 2.998, 398, 1.814, 400, 2.998,
          401, 1.977, 449, 4.089, 450, 5.888,
        ],
      ],
      ['title/injectables/LocalAuthStrategy.html', [90, 0.43, 213, 2.212]],
      [
        'body/injectables/LocalAuthStrategy.html',
        [
          3, 0.191, 4, 0.167, 5, 0.167, 7, 0.661, 8, 1.723, 11, 0.022, 12,
          1.223, 14, 1.246, 15, 1.738, 16, 0.483, 17, 0.547, 20, 0.191, 21,
          0.01, 22, 1.964, 23, 1.404, 24, 1.322, 26, 0.014, 27, 0.014, 90,
          0.572, 91, 1.049, 102, 2.095, 117, 1.941, 118, 1.723, 119, 1.091, 120,
          1.626, 122, 1.824, 126, 2.366, 157, 3.385, 158, 2.572, 182, 1.404,
          213, 2.943, 234, 1.591, 263, 1.322, 264, 1.404, 271, 3.556, 342,
          3.639, 398, 1.45, 401, 1.404, 403, 2.128, 404, 3.373, 405, 3.373, 407,
          2.943, 415, 1.964, 418, 2.128, 451, 4.6, 452, 3.405, 453, 3.405, 454,
          4.707, 455, 3.405, 456, 2.325, 457, 3.405, 458, 3.405,
        ],
      ],
      ['title/classes/LoginUserDto.html', [21, 0.01, 139, 2.212]],
      [
        'body/classes/LoginUserDto.html',
        [
          3, 0.237, 4, 0.207, 5, 0.207, 7, 0.818, 10, 2.538, 11, 0.022, 12,
          1.411, 15, 1.745, 16, 0.429, 20, 0.237, 21, 0.016, 26, 0.016, 27,
          0.016, 97, 1.848, 119, 1.258, 120, 1.875, 126, 2.634, 139, 3.394, 167,
          2.432, 301, 2.238, 328, 3.185, 336, 4.537, 338, 4.102, 339, 2.879,
          341, 2.879, 342, 3.754, 346, 3.594, 353, 4.629, 459, 5.12, 460, 4.215,
          461, 4.215,
        ],
      ],
      ['title/injectables/NaverAuthGuard.html', [90, 0.43, 173, 2.417]],
      [
        'body/injectables/NaverAuthGuard.html',
        [
          3, 0.27, 4, 0.235, 5, 0.235, 11, 0.022, 16, 0.504, 17, 0.771, 20,
          0.27, 21, 0.014, 26, 0.018, 27, 0.018, 90, 0.716, 91, 1.478, 173,
          4.022, 263, 1.862, 264, 1.977, 397, 2.998, 398, 1.814, 400, 2.998,
          401, 1.977, 462, 4.089, 463, 5.888,
        ],
      ],
      ['title/injectables/NaverAuthStrategy.html', [90, 0.43, 214, 2.212]],
      [
        'body/injectables/NaverAuthStrategy.html',
        [
          3, 0.149, 4, 0.13, 5, 0.13, 7, 0.513, 8, 1.438, 11, 0.022, 12, 1.021,
          14, 0.969, 15, 1.597, 16, 0.459, 17, 0.425, 20, 0.149, 21, 0.008, 23,
          1.62, 26, 0.012, 27, 0.012, 52, 1.027, 90, 0.477, 91, 0.815, 102,
          1.819, 117, 1.62, 118, 1.438, 119, 0.91, 120, 1.357, 126, 2.055, 152,
          1.654, 180, 2.59, 181, 1.438, 182, 1.62, 214, 2.456, 234, 1.836, 235,
          1.527, 236, 2.899, 237, 2.478, 255, 2.683, 259, 1.417, 263, 2.013,
          264, 1.091, 268, 1.962, 270, 1.807, 276, 1.807, 278, 1.527, 279,
          1.417, 289, 2.683, 344, 1.654, 345, 1.527, 398, 1.21, 401, 1.091, 403,
          1.654, 404, 2.929, 405, 2.929, 407, 2.929, 408, 1.999, 409, 1.999,
          410, 3.54, 411, 3.918, 412, 3.54, 415, 1.527, 418, 1.654, 419, 1.999,
          421, 2.256, 423, 1.999, 426, 3.35, 428, 1.807, 429, 2.968, 430, 1.999,
          432, 2.968, 433, 1.807, 434, 1.807, 435, 1.999, 436, 1.999, 437,
          2.968, 446, 3.35, 464, 3.995, 465, 3.929, 466, 2.646, 467, 1.999, 468,
          2.646, 469, 2.646, 470, 2.646, 471, 2.646,
        ],
      ],
      ['title/entities/Product.html', [472, 2.212, 473, 2.042]],
      [
        'body/entities/Product.html',
        [
          3, 0.193, 4, 0.168, 5, 0.168, 7, 0.665, 10, 2.863, 11, 0.022, 12,
          1.592, 15, 1.819, 16, 0.374, 20, 0.193, 21, 0.01, 26, 0.014, 27,
          0.014, 118, 1.982, 119, 1.419, 230, 4.815, 299, 2.957, 301, 1.95, 316,
          1.978, 324, 4.617, 325, 3.699, 326, 4.617, 327, 4.617, 332, 3.231,
          369, 2.342, 373, 3.231, 398, 1.056, 472, 2.957, 473, 2.729, 474,
          2.923, 475, 5.792, 476, 3.429, 477, 3.429, 478, 2.923, 479, 3.429,
          480, 3.429, 481, 3.429, 482, 2.923, 483, 2.923,
        ],
      ],
      ['title/controllers/ProductController.html', [0, 1.654, 484, 2.417]],
      [
        'body/controllers/ProductController.html',
        [
          0, 1.116, 2, 1.116, 3, 0.134, 4, 0.117, 5, 0.117, 7, 0.463, 8, 1.331,
          10, 2.477, 11, 0.022, 12, 1.377, 14, 1.939, 15, 1.686, 16, 0.419, 17,
          0.384, 20, 0.134, 21, 0.007, 22, 1.377, 23, 0.984, 24, 2.057, 26,
          0.011, 27, 0.011, 101, 1.803, 102, 2.582, 117, 2.03, 118, 1.802, 119,
          1.294, 120, 1.701, 122, 2.838, 150, 3.49, 151, 3.1, 153, 2.035, 165,
          3.754, 166, 2.035, 167, 1.377, 177, 4.518, 182, 2.185, 228, 2.747,
          243, 1.803, 304, 3.363, 321, 3.452, 473, 1.377, 484, 2.483, 485,
          2.035, 486, 3.754, 487, 4.198, 488, 3.1, 489, 3.1, 490, 2.387, 491,
          2.387, 492, 2.035, 493, 3.635, 494, 2.387, 495, 3.635, 496, 2.387,
          497, 2.035, 498, 3.635, 499, 2.387, 500, 3.1, 501, 2.035, 502, 3.078,
          503, 2.387, 504, 2.387, 505, 2.387, 506, 2.387, 507, 2.54, 508, 2.035,
          509, 1.803, 510, 2.747, 511, 2.035, 512, 2.387, 513, 2.387, 514,
          2.387, 515, 2.387, 516, 2.387, 517, 2.387, 518, 2.387, 519, 2.387,
          520, 2.387, 521, 2.387, 522, 2.387, 523, 2.387, 524, 2.387,
        ],
      ],
      ['title/modules/ProductModule.html', [28, 1.154, 43, 2.212]],
      [
        'body/modules/ProductModule.html',
        [
          2, 2.475, 3, 0.228, 4, 0.199, 5, 0.199, 11, 0.022, 16, 0.512, 17,
          0.652, 20, 0.228, 21, 0.012, 26, 0.016, 27, 0.016, 28, 1.923, 30,
          1.779, 31, 2.027, 32, 2.341, 33, 2.341, 34, 2.027, 35, 3.402, 36,
          2.341, 43, 4.157, 46, 3.055, 47, 2.341, 48, 2.173, 50, 2.173, 355,
          3.065, 356, 2.341, 473, 2.341, 484, 4.027, 507, 3.836, 508, 3.459,
          525, 3.459, 526, 3.459, 527, 4.057, 528, 3.459, 529, 4.057, 530,
          4.057,
        ],
      ],
      ['title/injectables/ProductService.html', [90, 0.43, 507, 2.042]],
      [
        'body/injectables/ProductService.html',
        [
          3, 0.127, 4, 0.111, 5, 0.111, 7, 0.438, 8, 1.276, 11, 0.022, 12, 1.42,
          14, 1.892, 15, 1.66, 16, 0.432, 17, 0.363, 20, 0.127, 21, 0.007, 24,
          2.007, 26, 0.011, 27, 0.011, 90, 0.424, 91, 0.696, 102, 2.555, 117,
          2.131, 118, 1.892, 119, 1.198, 120, 1.786, 122, 2.769, 150, 3.231,
          180, 2.39, 182, 2.131, 228, 2.634, 234, 1.629, 243, 2.634, 268, 1.129,
          278, 2.455, 279, 2.279, 304, 2.907, 316, 1.303, 321, 2.76, 356, 1.303,
          473, 3.672, 486, 2.972, 487, 4.079, 488, 2.972, 489, 2.972, 492,
          2.972, 497, 2.972, 500, 2.972, 501, 2.972, 502, 2.991, 507, 2.011,
          509, 1.707, 510, 2.634, 511, 1.926, 528, 1.926, 531, 1.926, 532,
          1.926, 533, 4.127, 534, 2.259, 535, 2.259, 536, 2.259, 537, 2.259,
          538, 2.259, 539, 2.259, 540, 4.079, 541, 1.926, 542, 2.259, 543,
          2.259, 544, 1.926, 545, 1.926, 546, 2.259, 547, 2.259, 548, 2.259,
        ],
      ],
      ['title/modules/RedisModule.html', [28, 1.154, 44, 2.212]],
      [
        'body/modules/RedisModule.html',
        [
          3, 0.232, 4, 0.202, 5, 0.202, 11, 0.022, 16, 0.497, 17, 0.663, 20,
          0.232, 21, 0.012, 24, 1.602, 26, 0.016, 27, 0.016, 28, 1.746, 30,
          1.809, 44, 3.347, 50, 2.868, 51, 3.347, 52, 1.602, 102, 1.602, 236,
          3.142, 241, 3.117, 256, 3.117, 266, 3.518, 267, 3.117, 358, 3.518,
          361, 3.518, 365, 3.518, 373, 2.818, 549, 4.126, 550, 4.126, 551,
          5.354, 552, 3.518, 553, 4.565, 554, 4.126, 555, 4.126, 556, 4.126,
          557, 4.126, 558, 4.126, 559, 4.126,
        ],
      ],
      ['title/interfaces/RequestUserInterface.html', [114, 2.417, 560, 2.212]],
      [
        'body/interfaces/RequestUserInterface.html',
        [
          3, 0.268, 4, 0.234, 5, 0.234, 7, 0.926, 11, 0.021, 16, 0.377, 20,
          0.268, 26, 0.018, 27, 0.018, 114, 4.01, 119, 1.106, 181, 2.597, 301,
          2.42, 398, 1.809, 560, 2.984, 561, 3.606, 562, 4.069, 563, 5.871, 564,
          3.606,
        ],
      ],
      ['title/injectables/TokenGuard.html', [90, 0.43, 163, 2.417]],
      [
        'body/injectables/TokenGuard.html',
        [
          3, 0.278, 4, 0.242, 5, 0.242, 11, 0.021, 16, 0.474, 17, 0.794, 20,
          0.278, 21, 0.015, 26, 0.018, 27, 0.018, 90, 0.729, 91, 1.523, 163,
          4.096, 398, 1.848, 400, 3.09, 401, 2.038, 565, 4.214, 566, 5.997,
        ],
      ],
      ['title/interfaces/TokenInterface.html', [261, 2.212, 560, 2.212]],
      [
        'body/interfaces/TokenInterface.html',
        [
          3, 0.281, 4, 0.245, 5, 0.245, 7, 0.969, 11, 0.021, 15, 1.784, 20,
          0.281, 26, 0.018, 27, 0.018, 119, 1.157, 248, 5.744, 261, 3.772, 301,
          2.488, 560, 3.121, 561, 3.772, 567, 4.257,
        ],
      ],
      ['title/injectables/TokenStrategy.html', [90, 0.43, 215, 2.212]],
      [
        'body/injectables/TokenStrategy.html',
        [
          3, 0.191, 4, 0.166, 5, 0.166, 7, 0.658, 8, 1.719, 11, 0.022, 12,
          1.221, 14, 1.242, 16, 0.499, 17, 0.545, 20, 0.191, 21, 0.01, 23,
          1.936, 24, 1.317, 26, 0.014, 27, 0.014, 52, 1.317, 90, 0.571, 91,
          1.045, 102, 2.091, 117, 1.936, 118, 1.719, 119, 1.088, 120, 1.622,
          122, 1.817, 182, 1.399, 215, 2.935, 234, 2.195, 235, 1.957, 236,
          3.153, 237, 2.668, 259, 1.817, 261, 3.633, 262, 2.893, 268, 2.346,
          290, 2.893, 398, 1.447, 401, 1.399, 404, 2.121, 405, 2.121, 407,
          2.935, 415, 1.957, 418, 2.121, 568, 2.893, 569, 4.696, 570, 3.393,
          571, 4.696, 572, 3.393, 573, 3.393, 574, 2.893, 575, 3.393, 576,
          3.393, 577, 3.393, 578, 3.393, 579, 3.393, 580, 3.393,
        ],
      ],
      ['title/classes/UpdateAuthDto.html', [21, 0.01, 581, 2.674]],
      [
        'body/classes/UpdateAuthDto.html',
        [
          3, 0.275, 4, 0.24, 5, 0.24, 11, 0.021, 16, 0.471, 20, 0.275, 21,
          0.014, 26, 0.018, 27, 0.018, 97, 2.146, 318, 3.342, 320, 3.697, 398,
          1.837, 581, 4.503, 582, 4.172, 583, 5.961, 584, 3.697, 585, 3.342,
          586, 3.342, 587, 4.893, 588, 4.893,
        ],
      ],
      ['title/classes/UpdateProductDto.html', [21, 0.01, 502, 2.212]],
      [
        'body/classes/UpdateProductDto.html',
        [
          3, 0.275, 4, 0.24, 5, 0.24, 11, 0.021, 16, 0.471, 20, 0.275, 21,
          0.014, 26, 0.018, 27, 0.018, 97, 2.146, 321, 2.823, 323, 3.697, 398,
          1.837, 502, 3.726, 509, 3.697, 510, 3.697, 584, 3.697, 585, 3.342,
          586, 3.342, 589, 4.172, 590, 5.961,
        ],
      ],
      ['title/classes/UpdateUserDto.html', [21, 0.01, 591, 2.674]],
      [
        'body/classes/UpdateUserDto.html',
        [
          3, 0.275, 4, 0.24, 5, 0.24, 11, 0.021, 16, 0.471, 20, 0.275, 21,
          0.014, 26, 0.018, 27, 0.018, 97, 2.146, 147, 2.621, 155, 3.342, 156,
          3.342, 341, 3.342, 398, 1.837, 584, 3.697, 585, 3.342, 586, 3.342,
          591, 4.503, 592, 4.172, 593, 5.961,
        ],
      ],
      ['title/entities/User.html', [181, 1.295, 472, 2.212]],
      [
        'body/entities/User.html',
        [
          3, 0.128, 4, 0.112, 5, 0.112, 7, 0.442, 10, 2.668, 11, 0.022, 12,
          1.483, 15, 1.698, 16, 0.433, 20, 0.128, 21, 0.01, 24, 0.883, 26,
          0.011, 27, 0.011, 102, 0.883, 119, 1.366, 120, 2.035, 126, 1.875, 180,
          1.136, 181, 1.283, 182, 1.762, 230, 4.683, 257, 1.94, 258, 1.719, 263,
          2.347, 264, 0.938, 271, 2.648, 273, 1.94, 299, 2.191, 301, 1.445, 316,
          1.313, 332, 2.394, 342, 2.672, 343, 3.644, 344, 2.672, 345, 2.466,
          369, 1.554, 373, 4.129, 398, 0.701, 428, 1.554, 433, 1.554, 434,
          1.554, 456, 1.554, 472, 2.191, 475, 5.154, 478, 1.94, 482, 1.94, 483,
          1.94, 594, 1.94, 595, 4.275, 596, 2.275, 597, 4.802, 598, 2.275, 599,
          2.275, 600, 2.275, 601, 2.275, 602, 2.275, 603, 2.275, 604, 4.802,
          605, 3.505, 606, 2.275, 607, 2.275, 608, 3.505, 609, 2.988, 610,
          3.505, 611, 1.94, 612, 4.802, 613, 2.275, 614, 2.275, 615, 3.505, 616,
          2.275, 617, 2.275, 618, 2.275, 619, 2.275, 620, 2.275, 621, 2.275,
          622, 2.275, 623, 1.94, 624, 2.275, 625, 2.275, 626, 2.275, 627, 2.275,
          628, 2.275,
        ],
      ],
      ['title/controllers/UserController.html', [0, 1.654, 629, 2.417]],
      [
        'body/controllers/UserController.html',
        [
          0, 2.264, 2, 2.264, 3, 0.272, 4, 0.237, 5, 0.237, 11, 0.022, 16,
          0.468, 17, 0.779, 20, 0.272, 21, 0.014, 22, 2.795, 23, 1.997, 26,
          0.018, 27, 0.018, 101, 3.66, 181, 1.773, 237, 2.639, 259, 2.595, 629,
          4.046, 630, 4.13, 631, 4.844,
        ],
      ],
      ['title/modules/UserModule.html', [28, 1.154, 45, 2.042]],
      [
        'body/modules/UserModule.html',
        [
          2, 2.404, 3, 0.218, 4, 0.19, 5, 0.19, 11, 0.022, 16, 0.505, 17, 0.623,
          20, 0.218, 21, 0.011, 26, 0.016, 27, 0.016, 28, 1.881, 30, 1.701, 31,
          1.938, 32, 2.238, 33, 2.238, 34, 1.938, 35, 3.328, 36, 3.328, 45,
          3.866, 46, 2.967, 47, 2.238, 48, 2.078, 50, 2.078, 181, 1.42, 237,
          2.909, 259, 2.078, 355, 2.931, 356, 2.238, 564, 2.931, 629, 3.94, 632,
          3.308, 633, 3.308, 634, 3.308, 635, 3.879, 636, 3.879, 637, 3.879,
        ],
      ],
      ['title/injectables/UserService.html', [90, 0.43, 237, 1.459]],
      [
        'body/injectables/UserService.html',
        [
          3, 0.165, 4, 0.144, 5, 0.144, 7, 0.571, 8, 1.554, 11, 0.022, 12,
          1.295, 14, 1.554, 15, 1.37, 16, 0.457, 17, 0.473, 20, 0.165, 21,
          0.009, 24, 1.648, 26, 0.013, 27, 0.013, 90, 0.516, 91, 0.906, 102,
          2.339, 117, 2.054, 118, 1.823, 119, 1.154, 120, 1.721, 122, 2.274,
          126, 2.392, 147, 2.921, 150, 1.839, 155, 2.009, 156, 2.009, 180,
          2.121, 181, 2.206, 182, 1.75, 234, 1.984, 237, 1.75, 268, 1.469, 278,
          1.697, 279, 1.576, 304, 3.725, 316, 1.697, 356, 1.697, 532, 2.508,
          533, 4.553, 540, 3.62, 541, 2.508, 544, 2.508, 545, 2.508, 564, 2.223,
          638, 2.508, 639, 4.246, 640, 4.246, 641, 2.942, 642, 4.246, 643,
          2.942, 644, 4.246, 645, 4.65, 646, 2.942, 647, 4.981, 648, 2.942, 649,
          2.942,
        ],
      ],
      ['title/coverage.html', [650, 3.652]],
      [
        'body/coverage.html',
        [
          0, 2.343, 1, 1.688, 5, 0.121, 6, 2.107, 11, 0.022, 18, 1.426, 21,
          0.018, 26, 0.011, 27, 0.011, 34, 1.235, 90, 0.814, 92, 2.107, 96,
          1.545, 98, 2.107, 99, 1.688, 100, 2.107, 114, 1.688, 119, 0.573, 139,
          1.545, 147, 1.324, 157, 1.324, 160, 1.688, 163, 1.688, 169, 1.688,
          171, 1.688, 173, 1.688, 181, 0.905, 211, 1.545, 212, 1.545, 213,
          1.545, 214, 1.545, 215, 1.545, 227, 2.107, 237, 1.019, 238, 1.426,
          261, 1.545, 279, 1.324, 299, 1.545, 300, 2.107, 318, 1.688, 319,
          2.107, 320, 2.82, 321, 1.426, 322, 2.107, 323, 2.82, 340, 2.107, 341,
          3.072, 379, 2.107, 396, 2.107, 397, 3.133, 402, 2.107, 403, 3.133,
          438, 2.107, 440, 2.107, 449, 2.107, 451, 2.107, 459, 2.107, 462,
          2.107, 464, 2.107, 472, 2.334, 473, 1.426, 474, 2.107, 484, 1.688,
          485, 2.107, 502, 1.545, 507, 1.426, 531, 2.107, 560, 2.334, 562,
          2.107, 565, 2.107, 567, 2.107, 568, 2.107, 581, 1.867, 582, 2.107,
          589, 2.107, 591, 1.867, 592, 2.107, 594, 2.107, 629, 1.688, 630,
          2.107, 638, 2.107, 650, 1.867, 651, 2.107, 652, 2.472, 653, 2.472,
          654, 7.172, 655, 5.012, 656, 2.472, 657, 2.472, 658, 6.636, 659,
          5.658, 660, 3.733, 661, 2.107, 662, 2.472, 663, 3.733, 664, 2.472,
          665, 3.733, 666, 2.472, 667, 2.472,
        ],
      ],
      ['title/dependencies.html', [31, 2.127, 668, 2.518]],
      [
        'body/dependencies.html',
        [
          11, 0.022, 17, 0.5, 21, 0.013, 26, 0.013, 27, 0.013, 31, 1.554, 52,
          1.208, 54, 2.652, 167, 1.795, 219, 2.35, 241, 3.339, 258, 2.35, 267,
          3.339, 316, 1.795, 339, 2.125, 356, 1.795, 388, 2.652, 401, 1.283,
          415, 3.542, 416, 3.339, 417, 3.768, 443, 3.339, 456, 3.018, 467,
          3.339, 552, 2.652, 553, 2.652, 574, 3.768, 585, 2.125, 586, 2.125,
          609, 2.652, 611, 2.652, 623, 2.652, 669, 3.111, 670, 3.111, 671,
          3.111, 672, 5.139, 673, 3.111, 674, 3.111, 675, 3.111, 676, 3.111,
          677, 3.111, 678, 3.111, 679, 3.111, 680, 3.111, 681, 3.111, 682,
          3.111, 683, 3.111, 684, 4.419, 685, 4.419, 686, 3.111, 687, 3.111,
          688, 3.111, 689, 3.111, 690, 3.111, 691, 3.111, 692, 5.91, 693, 3.111,
          694, 4.419, 695, 3.111, 696, 3.111, 697, 3.111, 698, 3.111, 699,
          3.111, 700, 3.111, 701, 3.111, 702, 3.111, 703, 3.111, 704, 3.111,
          705, 3.111, 706, 3.111, 707, 4.419, 708, 3.111, 709, 3.111, 710,
          3.111, 711, 3.111, 712, 3.111, 713, 3.111, 714, 3.111, 715, 3.111,
          716, 3.111,
        ],
      ],
      ['title/miscellaneous/enumerations.html', [717, 2.017, 718, 3.63]],
      [
        'body/miscellaneous/enumerations.html',
        [
          7, 0.969, 11, 0.021, 26, 0.018, 27, 0.018, 263, 2.343, 416, 4.559,
          443, 4.559, 456, 4.122, 467, 4.559, 645, 5.744, 717, 3.41, 718, 4.257,
          719, 4.993, 720, 4.993,
        ],
      ],
      ['title/miscellaneous/functions.html', [717, 2.017, 721, 3.63]],
      [
        'body/miscellaneous/functions.html',
        [
          7, 1.05, 11, 0.019, 26, 0.019, 27, 0.019, 34, 3.351, 661, 4.612, 717,
          3.694, 721, 4.612, 722, 5.409,
        ],
      ],
      ['title/index.html', [7, 0.573, 723, 2.953, 724, 2.953]],
      [
        'body/index.html',
        [
          4, 0.141, 11, 0.021, 26, 0.013, 27, 0.013, 48, 2.889, 325, 1.962, 533,
          2.17, 650, 2.17, 651, 2.449, 725, 2.872, 726, 2.872, 727, 4.914, 728,
          2.872, 729, 2.872, 730, 2.872, 731, 2.872, 732, 2.872, 733, 2.872,
          734, 4.914, 735, 2.872, 736, 2.872, 737, 5.394, 738, 2.872, 739,
          4.914, 740, 6.167, 741, 2.872, 742, 6.167, 743, 2.872, 744, 2.872,
          745, 2.872, 746, 4.173, 747, 2.872, 748, 2.872, 749, 2.872, 750,
          4.914, 751, 2.872, 752, 4.173, 753, 2.872, 754, 2.872, 755, 2.872,
          756, 5.394, 757, 2.872, 758, 2.872, 759, 2.872, 760, 2.872, 761,
          2.872, 762, 5.394, 763, 4.173, 764, 2.872, 765, 4.914, 766, 2.872,
          767, 4.599, 768, 4.173, 769, 2.872, 770, 2.872, 771, 2.872, 772,
          2.872, 773, 2.872, 774, 2.872, 775, 4.914, 776, 2.872, 777, 2.872,
          778, 2.872, 779, 4.173, 780, 2.449, 781, 2.872, 782, 2.872, 783,
          4.914, 784, 2.872, 785, 2.872, 786, 2.872, 787, 2.872, 788, 2.872,
          789, 2.872, 790, 2.872, 791, 4.173, 792, 2.872, 793, 2.872, 794,
          2.872, 795, 2.872, 796, 2.872, 797, 2.872, 798, 4.173, 799, 2.872,
          800, 2.872, 801, 2.872, 802, 4.173, 803, 4.173, 804, 2.872, 805,
          2.872, 806, 2.872, 807, 2.872, 808, 2.872, 809, 2.872, 810, 2.872,
          811, 2.872, 812, 2.872, 813, 2.872, 814, 2.872, 815, 2.449, 816,
          2.872, 817, 2.872, 818, 2.872, 819, 2.872, 820, 2.872, 821, 2.872,
          822, 2.449,
        ],
      ],
      ['title/modules.html', [30, 2.12]],
      [
        'body/modules.html',
        [
          11, 0.018, 26, 0.018, 27, 0.018, 29, 3.228, 30, 2.073, 40, 2.955, 41,
          2.955, 42, 2.727, 43, 2.955, 44, 2.955, 45, 2.727, 767, 5.791, 780,
          4.975, 823, 6.792, 824, 6.792, 825, 7.011, 826, 5.836,
        ],
      ],
      ['title/overview.html', [827, 4.122]],
      [
        'body/overview.html',
        [
          2, 1.392, 11, 0.022, 18, 2.894, 26, 0.013, 27, 0.013, 28, 0.971, 29,
          4.745, 30, 1.306, 31, 1.487, 32, 1.718, 33, 1.718, 34, 1.487, 35,
          1.718, 36, 1.718, 37, 2.539, 38, 2.539, 39, 2.539, 40, 4.404, 41,
          3.135, 42, 3.597, 43, 3.633, 44, 3.135, 45, 3.597, 46, 2.471, 47,
          1.718, 48, 1.595, 91, 0.918, 97, 1.306, 157, 2.686, 208, 2.539, 210,
          2.539, 211, 3.135, 212, 3.135, 213, 3.135, 214, 3.135, 215, 3.135,
          237, 2.57, 238, 3.597, 281, 3.652, 369, 2.034, 375, 2.539, 376, 2.539,
          377, 2.539, 507, 2.894, 525, 2.539, 526, 2.539, 561, 2.25, 632, 2.539,
          633, 2.539, 634, 2.539, 827, 2.539, 828, 2.978, 829, 2.978, 830,
          2.978, 831, 2.978,
        ],
      ],
      ['title/properties.html', [301, 1.755, 668, 2.518]],
      [
        'body/properties.html',
        [
          11, 0.021, 26, 0.019, 27, 0.019, 301, 2.193, 325, 3.634, 815, 4.536,
          822, 4.536, 832, 5.32, 833, 5.32, 834, 5.32,
        ],
      ],
    ],
    invertedIndex: [
      [
        '',
        {
          _index: 11,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'classes/Auth.html': {},
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'classes/BaseEntity.html': {},
            'classes/CreateAuthDto.html': {},
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
            'modules/DbModule.html': {},
            'modules/EmailModule.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthGuard.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthGuard.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthGuard.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'classes/LoginUserDto.html': {},
            'injectables/NaverAuthGuard.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'entities/Product.html': {},
            'controllers/ProductController.html': {},
            'modules/ProductModule.html': {},
            'injectables/ProductService.html': {},
            'modules/RedisModule.html': {},
            'interfaces/RequestUserInterface.html': {},
            'injectables/TokenGuard.html': {},
            'interfaces/TokenInterface.html': {},
            'injectables/TokenStrategy.html': {},
            'classes/UpdateAuthDto.html': {},
            'classes/UpdateProductDto.html': {},
            'classes/UpdateUserDto.html': {},
            'entities/User.html': {},
            'controllers/UserController.html': {},
            'modules/UserModule.html': {},
            'injectables/UserService.html': {},
            'coverage.html': {},
            'dependencies.html': {},
            'miscellaneous/enumerations.html': {},
            'miscellaneous/functions.html': {},
            'index.html': {},
            'modules.html': {},
            'overview.html': {},
            'properties.html': {},
          },
        },
      ],
      ['0', { _index: 654, title: {}, body: { 'coverage.html': {} } }],
      [
        '0.0.1',
        {
          _index: 833,
          title: {},
          body: { 'properties.html': {} },
        },
      ],
      ['0.1.10', { _index: 693, title: {}, body: { 'dependencies.html': {} } }],
      [
        '0.14.1',
        {
          _index: 702,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      ['0.2.0', { _index: 707, title: {}, body: { 'dependencies.html': {} } }],
      [
        '0.3.20',
        {
          _index: 716,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      ['0.5.1', { _index: 701, title: {}, body: { 'dependencies.html': {} } }],
      [
        '0.7.0',
        {
          _index: 706,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      ['0/1', { _index: 658, title: {}, body: { 'coverage.html': {} } }],
      [
        '0/11',
        {
          _index: 656,
          title: {},
          body: { 'coverage.html': {} },
        },
      ],
      ['0/2', { _index: 655, title: {}, body: { 'coverage.html': {} } }],
      [
        '0/3',
        {
          _index: 659,
          title: {},
          body: { 'coverage.html': {} },
        },
      ],
      ['0/4', { _index: 660, title: {}, body: { 'coverage.html': {} } }],
      [
        '0/5',
        {
          _index: 664,
          title: {},
          body: { 'coverage.html': {} },
        },
      ],
      ['0/6', { _index: 663, title: {}, body: { 'coverage.html': {} } }],
      [
        '0/7',
        {
          _index: 665,
          title: {},
          body: { 'coverage.html': {} },
        },
      ],
      ['0/8', { _index: 657, title: {}, body: { 'coverage.html': {} } }],
      [
        '1',
        {
          _index: 275,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      ['1.0.0', { _index: 709, title: {}, body: { 'dependencies.html': {} } }],
      [
        '1.0.1',
        {
          _index: 708,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      ['1.0.3', { _index: 695, title: {}, body: { 'dependencies.html': {} } }],
      [
        '1.0.38',
        {
          _index: 696,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      ['1.0.4', { _index: 697, title: {}, body: { 'dependencies.html': {} } }],
      [
        '1.0.6',
        {
          _index: 710,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      ['1.1.26', { _index: 670, title: {}, body: { 'dependencies.html': {} } }],
      [
        '1.4.7',
        {
          _index: 685,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      ['1.8.2', { _index: 704, title: {}, body: { 'dependencies.html': {} } }],
      [
        '1.8.6',
        {
          _index: 687,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      ['10.0.0', { _index: 672, title: {}, body: { 'dependencies.html': {} } }],
      [
        '10.0.2',
        {
          _index: 680,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      ['10.0.3', { _index: 676, title: {}, body: { 'dependencies.html': {} } }],
      [
        '10.2.0',
        {
          _index: 675,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      ['15', { _index: 830, title: {}, body: { 'overview.html': {} } }],
      [
        '17.1.1',
        {
          _index: 671,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      [
        '17.1.14',
        { _index: 689, title: {}, body: { 'dependencies.html': {} } },
      ],
      [
        '2',
        {
          _index: 281,
          title: {},
          body: { 'injectables/AuthService.html': {}, 'overview.html': {} },
        },
      ],
      ['2.0.0', { _index: 700, title: {}, body: { 'dependencies.html': {} } }],
      [
        '2.4.3',
        {
          _index: 698,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      ['2.4.6', { _index: 682, title: {}, body: { 'dependencies.html': {} } }],
      [
        '200',
        {
          _index: 621,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      [
        '3',
        {
          _index: 285,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      ['3.2.3', { _index: 673, title: {}, body: { 'dependencies.html': {} } }],
      [
        '4',
        {
          _index: 829,
          title: {},
          body: { 'overview.html': {} },
        },
      ],
      ['4.0.1', { _index: 694, title: {}, body: { 'dependencies.html': {} } }],
      [
        '4.1.0',
        {
          _index: 699,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      [
        '404',
        {
          _index: 436,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
          },
        },
      ],
      ['6.4.16', { _index: 691, title: {}, body: { 'dependencies.html': {} } }],
      [
        '6.9.15',
        {
          _index: 705,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      ['7', { _index: 828, title: {}, body: { 'overview.html': {} } }],
      [
        '7.4.2',
        {
          _index: 679,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      ['7.8.1', { _index: 715, title: {}, body: { 'dependencies.html': {} } }],
      [
        '8.13.0',
        {
          _index: 711,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      ['9', { _index: 831, title: {}, body: { 'overview.html': {} } }],
      [
        '__dirname',
        {
          _index: 370,
          title: {},
          body: { 'modules/DbModule.html': {} },
        },
      ],
      [
        'abstract',
        {
          _index: 317,
          title: {},
          body: { 'classes/BaseEntity.html': {} },
        },
      ],
      [
        'accesstoken',
        {
          _index: 289,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
          },
        },
      ],
      ['amazing', { _index: 808, title: {}, body: { 'index.html': {} } }],
      [
        'api',
        {
          _index: 177,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'controllers/ProductController.html': {},
          },
        },
      ],
      [
        'apibody',
        {
          _index: 165,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'controllers/ProductController.html': {},
          },
        },
      ],
      [
        'apiproperty',
        {
          _index: 336,
          title: {},
          body: {
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
            'classes/LoginUserDto.html': {},
          },
        },
      ],
      [
        'apiproperty()@isemail',
        {
          _index: 346,
          title: {},
          body: {
            'classes/CreateUserDto.html': {},
            'classes/LoginUserDto.html': {},
          },
        },
      ],
      [
        'apiproperty()@isnumber',
        {
          _index: 333,
          title: {},
          body: {
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
          },
        },
      ],
      [
        'apiproperty()@isstring',
        {
          _index: 328,
          title: {},
          body: {
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
            'classes/LoginUserDto.html': {},
          },
        },
      ],
      [
        'apitags',
        {
          _index: 166,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'controllers/ProductController.html': {},
          },
        },
      ],
      [
        "apitags('auth",
        {
          _index: 175,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        "apitags('product",
        {
          _index: 512,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      [
        'appcontroller',
        {
          _index: 1,
          title: { 'controllers/AppController.html': {} },
          body: {
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'coverage.html': {},
          },
        },
      ],
      ['application', { _index: 779, title: {}, body: { 'index.html': {} } }],
      [
        'applications',
        {
          _index: 733,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      [
        'appmodule',
        {
          _index: 29,
          title: { 'modules/AppModule.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'appservice',
        {
          _index: 18,
          title: { 'injectables/AppService.html': {} },
          body: {
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'async',
        {
          _index: 102,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
            'modules/RedisModule.html': {},
            'injectables/TokenStrategy.html': {},
            'entities/User.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      [
        'auth',
        {
          _index: 96,
          title: { 'classes/Auth.html': {} },
          body: {
            'classes/Auth.html': {},
            'controllers/AuthController.html': {},
            'injectables/EmailService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'auth.dto',
        {
          _index: 588,
          title: {},
          body: { 'classes/UpdateAuthDto.html': {} },
        },
      ],
      [
        'auth.dto.ts',
        {
          _index: 320,
          title: {},
          body: {
            'classes/CreateAuthDto.html': {},
            'classes/UpdateAuthDto.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'auth.guard',
        {
          _index: 162,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'auth.guard.ts',
        {
          _index: 397,
          title: {},
          body: {
            'injectables/GoogleAuthGuard.html': {},
            'injectables/KakaoAuthGuard.html': {},
            'injectables/LocalAuthGuard.html': {},
            'injectables/NaverAuthGuard.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'auth.strategy',
        {
          _index: 221,
          title: {},
          body: { 'modules/AuthModule.html': {} },
        },
      ],
      [
        'auth.strategy.ts',
        {
          _index: 403,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'auth.strategy.ts:11',
        {
          _index: 453,
          title: {},
          body: { 'injectables/LocalAuthStrategy.html': {} },
        },
      ],
      [
        'auth.strategy.ts:12',
        {
          _index: 408,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
          },
        },
      ],
      [
        'auth.strategy.ts:19',
        {
          _index: 455,
          title: {},
          body: { 'injectables/LocalAuthStrategy.html': {} },
        },
      ],
      [
        'auth.strategy.ts:23',
        {
          _index: 442,
          title: {},
          body: { 'injectables/KakaoAuthStrategy.html': {} },
        },
      ],
      [
        'auth.strategy.ts:24',
        {
          _index: 466,
          title: {},
          body: { 'injectables/NaverAuthStrategy.html': {} },
        },
      ],
      [
        'auth.strategy.ts:25',
        {
          _index: 414,
          title: {},
          body: { 'injectables/GoogleAuthStrategy.html': {} },
        },
      ],
      [
        'auth/auth.controller',
        {
          _index: 217,
          title: {},
          body: { 'modules/AuthModule.html': {} },
        },
      ],
      [
        'auth/auth.module',
        {
          _index: 58,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'auth/auth.service',
        {
          _index: 158,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'injectables/LocalAuthStrategy.html': {},
          },
        },
      ],
      [
        'auth/dto/create',
        {
          _index: 587,
          title: {},
          body: { 'classes/UpdateAuthDto.html': {} },
        },
      ],
      [
        'auth/guard/google',
        {
          _index: 170,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'auth/guard/kakao',
        {
          _index: 172,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'auth/guard/local',
        {
          _index: 161,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'auth/guard/naver',
        {
          _index: 174,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'auth/guard/token.guard',
        {
          _index: 164,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'auth/interface/requestuser.interface',
        {
          _index: 159,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'auth/interface/token.interface',
        {
          _index: 262,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'injectables/TokenStrategy.html': {},
          },
        },
      ],
      [
        'auth/strategy/google',
        {
          _index: 223,
          title: {},
          body: { 'modules/AuthModule.html': {} },
        },
      ],
      [
        'auth/strategy/kakao',
        {
          _index: 224,
          title: {},
          body: { 'modules/AuthModule.html': {} },
        },
      ],
      [
        'auth/strategy/local',
        {
          _index: 220,
          title: {},
          body: { 'modules/AuthModule.html': {} },
        },
      ],
      [
        'auth/strategy/naver',
        {
          _index: 225,
          title: {},
          body: { 'modules/AuthModule.html': {} },
        },
      ],
      [
        'auth/strategy/token.strategy',
        {
          _index: 222,
          title: {},
          body: { 'modules/AuthModule.html': {} },
        },
      ],
      [
        'authcontroller',
        {
          _index: 99,
          title: { 'controllers/AuthController.html': {} },
          body: {
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'authenticate',
        {
          _index: 103,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'authenticate(@req',
        {
          _index: 192,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'authenticate(req',
        {
          _index: 113,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'authguard',
        {
          _index: 400,
          title: {},
          body: {
            'injectables/GoogleAuthGuard.html': {},
            'injectables/KakaoAuthGuard.html': {},
            'injectables/LocalAuthGuard.html': {},
            'injectables/NaverAuthGuard.html': {},
            'injectables/TokenGuard.html': {},
          },
        },
      ],
      [
        "authguard('jwt",
        {
          _index: 566,
          title: {},
          body: { 'injectables/TokenGuard.html': {} },
        },
      ],
      [
        'authguard(provider.google',
        {
          _index: 399,
          title: {},
          body: { 'injectables/GoogleAuthGuard.html': {} },
        },
      ],
      [
        'authguard(provider.kakao',
        {
          _index: 439,
          title: {},
          body: { 'injectables/KakaoAuthGuard.html': {} },
        },
      ],
      [
        'authguard(provider.local',
        {
          _index: 450,
          title: {},
          body: { 'injectables/LocalAuthGuard.html': {} },
        },
      ],
      [
        'authguard(provider.naver',
        {
          _index: 463,
          title: {},
          body: { 'injectables/NaverAuthGuard.html': {} },
        },
      ],
      [
        'authmodule',
        {
          _index: 40,
          title: { 'modules/AuthModule.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'author',
        {
          _index: 815,
          title: {},
          body: { 'index.html': {}, 'properties.html': {} },
        },
      ],
      [
        'authservice',
        {
          _index: 157,
          title: { 'injectables/AuthService.html': {} },
          body: {
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'autoloadentities',
        {
          _index: 372,
          title: {},
          body: { 'modules/DbModule.html': {} },
        },
      ],
      ['available', { _index: 826, title: {}, body: { 'modules.html': {} } }],
      [
        'await',
        {
          _index: 182,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
            'injectables/TokenStrategy.html': {},
            'entities/User.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      ['backers', { _index: 809, title: {}, body: { 'index.html': {} } }],
      [
        'baseentity',
        {
          _index: 299,
          title: { 'classes/BaseEntity.html': {} },
          body: {
            'classes/BaseEntity.html': {},
            'entities/Product.html': {},
            'entities/User.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'bcrypt',
        {
          _index: 257,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'entities/User.html': {},
          },
        },
      ],
      [
        'bcrypt.compare(dto.password',
        {
          _index: 283,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'bcrypt.gensalt(10',
        {
          _index: 616,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      [
        'bcrypt.hash(this.password',
        {
          _index: 618,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      [
        'bcryptjs',
        {
          _index: 258,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'entities/User.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'beforeinsert',
        {
          _index: 608,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      [
        'beforesave',
        { _index: 613, title: {}, body: { 'entities/User.html': {} } },
      ],
      [
        'board',
        {
          _index: 801,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      [
        'body',
        {
          _index: 151,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'controllers/ProductController.html': {},
          },
        },
      ],
      [
        'bootstrap',
        {
          _index: 34,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/EmailModule.html': {},
            'modules/ProductModule.html': {},
            'modules/UserModule.html': {},
            'coverage.html': {},
            'miscellaneous/functions.html': {},
            'overview.html': {},
          },
        },
      ],
      ['browse', { _index: 825, title: {}, body: { 'modules.html': {} } }],
      [
        'browser',
        {
          _index: 823,
          title: {},
          body: { 'modules.html': {} },
        },
      ],
      ['building', { _index: 728, title: {}, body: { 'index.html': {} } }],
      [
        'c',
        {
          _index: 359,
          title: {},
          body: { 'modules/DbModule.html': {} },
        },
      ],
      [
        "c.get('postgres_db",
        {
          _index: 368,
          title: {},
          body: { 'modules/DbModule.html': {} },
        },
      ],
      [
        "c.get('postgres_host",
        {
          _index: 362,
          title: {},
          body: { 'modules/DbModule.html': {} },
        },
      ],
      [
        "c.get('postgres_password",
        {
          _index: 364,
          title: {},
          body: { 'modules/DbModule.html': {} },
        },
      ],
      [
        "c.get('postgres_port",
        {
          _index: 366,
          title: {},
          body: { 'modules/DbModule.html': {} },
        },
      ],
      [
        "c.get('postgres_user",
        {
          _index: 363,
          title: {},
          body: { 'modules/DbModule.html': {} },
        },
      ],
      [
        'cache',
        {
          _index: 241,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'modules/RedisModule.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'cache_manager',
        {
          _index: 265,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'cachemanager',
        {
          _index: 240,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'cachemodule',
        {
          _index: 550,
          title: {},
          body: { 'modules/RedisModule.html': {} },
        },
      ],
      [
        'cachemodule.registerasync',
        {
          _index: 554,
          title: {},
          body: { 'modules/RedisModule.html': {} },
        },
      ],
      [
        'callbackurl',
        {
          _index: 423,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
          },
        },
      ],
      [
        'catch',
        {
          _index: 433,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'entities/User.html': {},
          },
        },
      ],
      [
        'category',
        {
          _index: 324,
          title: {},
          body: {
            'classes/CreateProductDto.html': {},
            'entities/Product.html': {},
          },
        },
      ],
      ['channel', { _index: 770, title: {}, body: { 'index.html': {} } }],
      [
        'check',
        {
          _index: 756,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      [
        'class',
        {
          _index: 21,
          title: {
            'classes/Auth.html': {},
            'classes/BaseEntity.html': {},
            'classes/CreateAuthDto.html': {},
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
            'classes/LoginUserDto.html': {},
            'classes/UpdateAuthDto.html': {},
            'classes/UpdateProductDto.html': {},
            'classes/UpdateUserDto.html': {},
          },
          body: {
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'classes/Auth.html': {},
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'classes/BaseEntity.html': {},
            'classes/CreateAuthDto.html': {},
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
            'modules/DbModule.html': {},
            'modules/EmailModule.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthGuard.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthGuard.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthGuard.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'classes/LoginUserDto.html': {},
            'injectables/NaverAuthGuard.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'entities/Product.html': {},
            'controllers/ProductController.html': {},
            'modules/ProductModule.html': {},
            'injectables/ProductService.html': {},
            'modules/RedisModule.html': {},
            'injectables/TokenGuard.html': {},
            'injectables/TokenStrategy.html': {},
            'classes/UpdateAuthDto.html': {},
            'classes/UpdateProductDto.html': {},
            'classes/UpdateUserDto.html': {},
            'entities/User.html': {},
            'controllers/UserController.html': {},
            'modules/UserModule.html': {},
            'injectables/UserService.html': {},
            'coverage.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'classes',
        {
          _index: 97,
          title: {},
          body: {
            'classes/Auth.html': {},
            'classes/BaseEntity.html': {},
            'classes/CreateAuthDto.html': {},
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
            'classes/LoginUserDto.html': {},
            'classes/UpdateAuthDto.html': {},
            'classes/UpdateProductDto.html': {},
            'classes/UpdateUserDto.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'clientid',
        {
          _index: 419,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
          },
        },
      ],
      [
        'clientsecret',
        {
          _index: 421,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
          },
        },
      ],
      [
        'cluster_appmodule',
        {
          _index: 37,
          title: {},
          body: { 'modules/AppModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_appmodule_imports',
        {
          _index: 38,
          title: {},
          body: { 'modules/AppModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_appmodule_providers',
        {
          _index: 39,
          title: {},
          body: { 'modules/AppModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_authmodule',
        {
          _index: 208,
          title: {},
          body: { 'modules/AuthModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_authmodule_imports',
        {
          _index: 209,
          title: {},
          body: { 'modules/AuthModule.html': {} },
        },
      ],
      [
        'cluster_authmodule_providers',
        {
          _index: 210,
          title: {},
          body: { 'modules/AuthModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_emailmodule',
        {
          _index: 375,
          title: {},
          body: { 'modules/EmailModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_emailmodule_exports',
        {
          _index: 376,
          title: {},
          body: { 'modules/EmailModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_emailmodule_providers',
        {
          _index: 377,
          title: {},
          body: { 'modules/EmailModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_productmodule',
        {
          _index: 525,
          title: {},
          body: { 'modules/ProductModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_productmodule_providers',
        {
          _index: 526,
          title: {},
          body: { 'modules/ProductModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_usermodule',
        {
          _index: 632,
          title: {},
          body: { 'modules/UserModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_usermodule_exports',
        {
          _index: 634,
          title: {},
          body: { 'modules/UserModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_usermodule_providers',
        {
          _index: 633,
          title: {},
          body: { 'modules/UserModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'column',
        {
          _index: 475,
          title: {},
          body: { 'entities/Product.html': {}, 'entities/User.html': {} },
        },
      ],
      [
        'column({nullable',
        {
          _index: 597,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      [
        'column({type',
        {
          _index: 603,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      [
        'column({unique',
        {
          _index: 478,
          title: {},
          body: { 'entities/Product.html': {}, 'entities/User.html': {} },
        },
      ],
      ['come', { _index: 759, title: {}, body: { 'index.html': {} } }],
      [
        'compodoc/compodoc',
        {
          _index: 669,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      [
        'configmodule',
        {
          _index: 51,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/DbModule.html': {},
            'modules/EmailModule.html': {},
            'modules/RedisModule.html': {},
          },
        },
      ],
      [
        'configmodule.forroot',
        {
          _index: 62,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'configservice',
        {
          _index: 236,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'modules/DbModule.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'modules/RedisModule.html': {},
            'injectables/TokenStrategy.html': {},
          },
        },
      ],
      [
        "configservice.get('email_password",
        {
          _index: 394,
          title: {},
          body: { 'injectables/EmailService.html': {} },
        },
      ],
      [
        "configservice.get('email_service",
        {
          _index: 392,
          title: {},
          body: { 'injectables/EmailService.html': {} },
        },
      ],
      [
        "configservice.get('email_user",
        {
          _index: 393,
          title: {},
          body: { 'injectables/EmailService.html': {} },
        },
      ],
      [
        "configservice.get('google_callback_url",
        {
          _index: 424,
          title: {},
          body: { 'injectables/GoogleAuthStrategy.html': {} },
        },
      ],
      [
        "configservice.get('google_client_id",
        {
          _index: 420,
          title: {},
          body: { 'injectables/GoogleAuthStrategy.html': {} },
        },
      ],
      [
        "configservice.get('google_client_secret",
        {
          _index: 422,
          title: {},
          body: { 'injectables/GoogleAuthStrategy.html': {} },
        },
      ],
      [
        "configservice.get('kakao_callback_url",
        {
          _index: 445,
          title: {},
          body: { 'injectables/KakaoAuthStrategy.html': {} },
        },
      ],
      [
        "configservice.get('kakao_client_id",
        {
          _index: 444,
          title: {},
          body: { 'injectables/KakaoAuthStrategy.html': {} },
        },
      ],
      [
        "configservice.get('naver_callback_url",
        {
          _index: 470,
          title: {},
          body: { 'injectables/NaverAuthStrategy.html': {} },
        },
      ],
      [
        "configservice.get('naver_client_id",
        {
          _index: 468,
          title: {},
          body: { 'injectables/NaverAuthStrategy.html': {} },
        },
      ],
      [
        "configservice.get('naver_client_secret",
        {
          _index: 469,
          title: {},
          body: { 'injectables/NaverAuthStrategy.html': {} },
        },
      ],
      [
        "configservice.get('redis_host",
        {
          _index: 555,
          title: {},
          body: { 'modules/RedisModule.html': {} },
        },
      ],
      [
        "configservice.get('redis_port",
        {
          _index: 556,
          title: {},
          body: { 'modules/RedisModule.html': {} },
        },
      ],
      [
        "configservice.get('redis_ttl",
        {
          _index: 558,
          title: {},
          body: { 'modules/RedisModule.html': {} },
        },
      ],
      [
        "configservice.get('token_secret",
        {
          _index: 578,
          title: {},
          body: { 'injectables/TokenStrategy.html': {} },
        },
      ],
      [
        'console.log',
        {
          _index: 431,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
          },
        },
      ],
      [
        'console.log(e',
        {
          _index: 628,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      [
        'const',
        {
          _index: 180,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'injectables/ProductService.html': {},
            'entities/User.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      [
        'constructor',
        {
          _index: 234,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'injectables/ProductService.html': {},
            'injectables/TokenStrategy.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      [
        'constructor(authservice',
        {
          _index: 452,
          title: {},
          body: { 'injectables/LocalAuthStrategy.html': {} },
        },
      ],
      [
        'constructor(configservice',
        {
          _index: 235,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'injectables/TokenStrategy.html': {},
          },
        },
      ],
      [
        'constructor(private',
        {
          _index: 22,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'controllers/AuthController.html': {},
            'injectables/EmailService.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'controllers/ProductController.html': {},
            'controllers/UserController.html': {},
          },
        },
      ],
      [
        'constructor(repository',
        {
          _index: 532,
          title: {},
          body: {
            'injectables/ProductService.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      [
        'controller',
        {
          _index: 0,
          title: {
            'controllers/AppController.html': {},
            'controllers/AuthController.html': {},
            'controllers/ProductController.html': {},
            'controllers/UserController.html': {},
          },
          body: {
            'controllers/AppController.html': {},
            'controllers/AuthController.html': {},
            'controllers/ProductController.html': {},
            'controllers/UserController.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        "controller('auth",
        {
          _index: 176,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        "controller('product",
        {
          _index: 513,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      [
        "controller('user",
        {
          _index: 631,
          title: {},
          body: { 'controllers/UserController.html': {} },
        },
      ],
      [
        'controllers',
        {
          _index: 2,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'controllers/ProductController.html': {},
            'modules/ProductModule.html': {},
            'controllers/UserController.html': {},
            'modules/UserModule.html': {},
            'overview.html': {},
          },
        },
      ],
      ['cookie', { _index: 703, title: {}, body: { 'dependencies.html': {} } }],
      [
        'courses',
        {
          _index: 777,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      [
        'coverage',
        {
          _index: 650,
          title: { 'coverage.html': {} },
          body: { 'coverage.html': {}, 'index.html': {} },
        },
      ],
      [
        'create',
        {
          _index: 228,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
          },
        },
      ],
      [
        'create(@body',
        {
          _index: 518,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      [
        'create(dto',
        {
          _index: 243,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
          },
        },
      ],
      [
        'createauthdto',
        {
          _index: 318,
          title: { 'classes/CreateAuthDto.html': {} },
          body: {
            'classes/CreateAuthDto.html': {},
            'classes/UpdateAuthDto.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'createdat',
        {
          _index: 302,
          title: {},
          body: { 'classes/BaseEntity.html': {} },
        },
      ],
      [
        'createdatecolumn',
        {
          _index: 307,
          title: {},
          body: { 'classes/BaseEntity.html': {} },
        },
      ],
      [
        'createproductdto',
        {
          _index: 321,
          title: { 'classes/CreateProductDto.html': {} },
          body: {
            'classes/CreateProductDto.html': {},
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
            'classes/UpdateProductDto.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'createtransport',
        {
          _index: 387,
          title: {},
          body: { 'injectables/EmailService.html': {} },
        },
      ],
      [
        'createuser',
        {
          _index: 639,
          title: {},
          body: { 'injectables/UserService.html': {} },
        },
      ],
      [
        'createuser(dto',
        {
          _index: 642,
          title: {},
          body: { 'injectables/UserService.html': {} },
        },
      ],
      [
        'createuserdto',
        {
          _index: 147,
          title: { 'classes/CreateUserDto.html': {} },
          body: {
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/CreateUserDto.html': {},
            'classes/UpdateUserDto.html': {},
            'injectables/UserService.html': {},
            'coverage.html': {},
          },
        },
      ],
      ['d', { _index: 624, title: {}, body: { 'entities/User.html': {} } }],
      [
        'database',
        {
          _index: 367,
          title: {},
          body: { 'modules/DbModule.html': {} },
        },
      ],
      [
        'date',
        {
          _index: 306,
          title: {},
          body: { 'classes/BaseEntity.html': {} },
        },
      ],
      [
        'db/db.module',
        {
          _index: 56,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'dbmodule',
        {
          _index: 41,
          title: { 'modules/DbModule.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/DbModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'declarations',
        {
          _index: 33,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/EmailModule.html': {},
            'modules/ProductModule.html': {},
            'modules/UserModule.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'decorators',
        {
          _index: 10,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'controllers/AuthController.html': {},
            'classes/BaseEntity.html': {},
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
            'classes/LoginUserDto.html': {},
            'entities/Product.html': {},
            'controllers/ProductController.html': {},
            'entities/User.html': {},
          },
        },
      ],
      ['deeper', { _index: 772, title: {}, body: { 'index.html': {} } }],
      [
        'default',
        {
          _index: 605,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      [
        'defined',
        {
          _index: 12,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/BaseEntity.html': {},
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'classes/LoginUserDto.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'entities/Product.html': {},
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
            'injectables/TokenStrategy.html': {},
            'entities/User.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      [
        'delete',
        {
          _index: 486,
          title: {},
          body: {
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
          },
        },
      ],
      [
        "delete('/:id",
        {
          _index: 493,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      [
        "delete(@param('id",
        {
          _index: 520,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      [
        'delete(id',
        {
          _index: 492,
          title: {},
          body: {
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
          },
        },
      ],
      [
        'deletedat',
        {
          _index: 303,
          title: {},
          body: { 'classes/BaseEntity.html': {} },
        },
      ],
      [
        'deletedatecolumn',
        {
          _index: 309,
          title: {},
          body: { 'classes/BaseEntity.html': {} },
        },
      ],
      [
        'dependencies',
        {
          _index: 31,
          title: { 'dependencies.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/EmailModule.html': {},
            'modules/ProductModule.html': {},
            'modules/UserModule.html': {},
            'dependencies.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'description',
        {
          _index: 325,
          title: {},
          body: {
            'classes/CreateProductDto.html': {},
            'entities/Product.html': {},
            'index.html': {},
            'properties.html': {},
          },
        },
      ],
      ['development', { _index: 743, title: {}, body: { 'index.html': {} } }],
      [
        'devtools',
        {
          _index: 785,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      ['discord', { _index: 769, title: {}, body: { 'index.html': {} } }],
      [
        'displayname',
        {
          _index: 426,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
          },
        },
      ],
      ['dive', { _index: 771, title: {}, body: { 'index.html': {} } }],
      [
        '.env',
        {
          _index: 89,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'documentation',
        {
          _index: 651,
          title: {},
          body: { 'coverage.html': {}, 'index.html': {} },
        },
      ],
      [
        'done',
        {
          _index: 412,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
          },
        },
      ],
      [
        'done(null',
        {
          _index: 432,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
          },
        },
      ],
      [
        'dto',
        {
          _index: 150,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      [
        'dto.email',
        {
          _index: 277,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'e',
        {
          _index: 434,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'entities/User.html': {},
          },
        },
      ],
      [
        'e.status',
        {
          _index: 435,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
          },
        },
      ],
      ['e2e', { _index: 753, title: {}, body: { 'index.html': {} } }],
      [
        'efficient',
        {
          _index: 729,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      [
        'email',
        {
          _index: 126,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/CreateUserDto.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'classes/LoginUserDto.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'entities/User.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      [
        'email/email.module',
        {
          _index: 59,
          title: {},
          body: { 'modules/AppModule.html': {}, 'modules/AuthModule.html': {} },
        },
      ],
      [
        'email/email.service',
        {
          _index: 260,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'modules/EmailModule.html': {},
          },
        },
      ],
      [
        'email_password',
        {
          _index: 74,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'email_service',
        {
          _index: 72,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'email_user',
        {
          _index: 73,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'emailmodule',
        {
          _index: 42,
          title: { 'modules/EmailModule.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/EmailModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'emailotp',
        {
          _index: 104,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        "emailotp(@body('email",
        {
          _index: 206,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'emailotp(email',
        {
          _index: 123,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'emailservice',
        {
          _index: 238,
          title: { 'injectables/EmailService.html': {} },
          body: {
            'injectables/AuthService.html': {},
            'modules/EmailModule.html': {},
            'injectables/EmailService.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      ['enterprise', { _index: 790, title: {}, body: { 'index.html': {} } }],
      [
        'entities',
        {
          _index: 369,
          title: {},
          body: {
            'modules/DbModule.html': {},
            'entities/Product.html': {},
            'entities/User.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'entity',
        {
          _index: 472,
          title: { 'entities/Product.html': {}, 'entities/User.html': {} },
          body: {
            'entities/Product.html': {},
            'entities/User.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'entity{.ts,.js',
        {
          _index: 371,
          title: {},
          body: { 'modules/DbModule.html': {} },
        },
      ],
      [
        'enum',
        {
          _index: 604,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      [
        'enumerations',
        {
          _index: 718,
          title: { 'miscellaneous/enumerations.html': {} },
          body: { 'miscellaneous/enumerations.html': {} },
        },
      ],
      [
        'envfilepath',
        {
          _index: 88,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      ['example', { _index: 739, title: {}, body: { 'index.html': {} } }],
      [
        'exclude',
        {
          _index: 610,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      ['experience', { _index: 774, title: {}, body: { 'index.html': {} } }],
      [
        'expiresin',
        {
          _index: 294,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'export',
        {
          _index: 20,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'classes/Auth.html': {},
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'classes/BaseEntity.html': {},
            'classes/CreateAuthDto.html': {},
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
            'modules/DbModule.html': {},
            'modules/EmailModule.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthGuard.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthGuard.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthGuard.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'classes/LoginUserDto.html': {},
            'injectables/NaverAuthGuard.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'entities/Product.html': {},
            'controllers/ProductController.html': {},
            'modules/ProductModule.html': {},
            'injectables/ProductService.html': {},
            'modules/RedisModule.html': {},
            'interfaces/RequestUserInterface.html': {},
            'injectables/TokenGuard.html': {},
            'interfaces/TokenInterface.html': {},
            'injectables/TokenStrategy.html': {},
            'classes/UpdateAuthDto.html': {},
            'classes/UpdateProductDto.html': {},
            'classes/UpdateUserDto.html': {},
            'entities/User.html': {},
            'controllers/UserController.html': {},
            'modules/UserModule.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      [
        'exports',
        {
          _index: 36,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/EmailModule.html': {},
            'modules/ProductModule.html': {},
            'modules/UserModule.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'express',
        { _index: 678, title: {}, body: { 'dependencies.html': {} } },
      ],
      [
        'extends',
        {
          _index: 398,
          title: {},
          body: {
            'injectables/GoogleAuthGuard.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthGuard.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthGuard.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'injectables/NaverAuthGuard.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'entities/Product.html': {},
            'interfaces/RequestUserInterface.html': {},
            'injectables/TokenGuard.html': {},
            'injectables/TokenStrategy.html': {},
            'classes/UpdateAuthDto.html': {},
            'classes/UpdateProductDto.html': {},
            'classes/UpdateUserDto.html': {},
            'entities/User.html': {},
          },
        },
      ],
      [
        'extractjwt',
        {
          _index: 573,
          title: {},
          body: { 'injectables/TokenStrategy.html': {} },
        },
      ],
      [
        'extractjwt.fromauthheaderasbearertoken',
        {
          _index: 576,
          title: {},
          body: { 'injectables/TokenStrategy.html': {} },
        },
      ],
      ['few', { _index: 757, title: {}, body: { 'index.html': {} } }],
      [
        'file',
        {
          _index: 5,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'classes/Auth.html': {},
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'classes/BaseEntity.html': {},
            'classes/CreateAuthDto.html': {},
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
            'modules/DbModule.html': {},
            'modules/EmailModule.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthGuard.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthGuard.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthGuard.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'classes/LoginUserDto.html': {},
            'injectables/NaverAuthGuard.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'entities/Product.html': {},
            'controllers/ProductController.html': {},
            'modules/ProductModule.html': {},
            'injectables/ProductService.html': {},
            'modules/RedisModule.html': {},
            'interfaces/RequestUserInterface.html': {},
            'injectables/TokenGuard.html': {},
            'interfaces/TokenInterface.html': {},
            'injectables/TokenStrategy.html': {},
            'classes/UpdateAuthDto.html': {},
            'classes/UpdateProductDto.html': {},
            'classes/UpdateUserDto.html': {},
            'entities/User.html': {},
            'controllers/UserController.html': {},
            'modules/UserModule.html': {},
            'injectables/UserService.html': {},
            'coverage.html': {},
          },
        },
      ],
      ['follow', { _index: 794, title: {}, body: { 'index.html': {} } }],
      [
        'framework',
        {
          _index: 727,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      ['full', { _index: 789, title: {}, body: { 'index.html': {} } }],
      [
        'function',
        {
          _index: 662,
          title: {},
          body: { 'coverage.html': {} },
        },
      ],
      [
        'functions',
        {
          _index: 721,
          title: { 'miscellaneous/functions.html': {} },
          body: { 'miscellaneous/functions.html': {} },
        },
      ],
      [
        'generateotp',
        {
          _index: 229,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'generatetoken',
        {
          _index: 231,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'generatetoken(userid',
        {
          _index: 246,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        "get('/:productid",
        {
          _index: 498,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      [
        "get('/all",
        {
          _index: 495,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      [
        "get('/google",
        {
          _index: 193,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        "get('/google')@useguards(googleauthguard",
        {
          _index: 127,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        "get('/google/callback",
        {
          _index: 196,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        "get('/google/callback')@useguards(googleauthguard",
        {
          _index: 130,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        "get('/kakao",
        {
          _index: 198,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        "get('/kakao')@useguards(kakaoauthguard",
        {
          _index: 132,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        "get('/kakao/callback",
        {
          _index: 200,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        "get('/kakao/callback')@useguards(kakaoauthguard",
        {
          _index: 135,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        "get('/naver",
        {
          _index: 202,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        "get('/naver')@useguards(naverauthguard",
        {
          _index: 141,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        "get('/naver/callback",
        {
          _index: 204,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        "get('/naver/callback')@useguards(naverauthguard",
        {
          _index: 144,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'get()@useguards(tokenguard',
        {
          _index: 115,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'getall',
        {
          _index: 487,
          title: {},
          body: {
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
          },
        },
      ],
      [
        'gethello',
        {
          _index: 9,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'injectables/AppService.html': {},
          },
        },
      ],
      [
        'getproductbyid',
        {
          _index: 488,
          title: {},
          body: {
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
          },
        },
      ],
      [
        "getproductbyid(@param('productid",
        {
          _index: 515,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      [
        'getproductbyid(productid',
        {
          _index: 497,
          title: {},
          body: {
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
          },
        },
      ],
      ['getting', { _index: 723, title: { 'index.html': {} }, body: {} }],
      [
        'getuserby',
        {
          _index: 640,
          title: {},
          body: { 'injectables/UserService.html': {} },
        },
      ],
      [
        'getuserby(key',
        {
          _index: 644,
          title: {},
          body: { 'injectables/UserService.html': {} },
        },
      ],
      [
        'google',
        {
          _index: 416,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'dependencies.html': {},
            'miscellaneous/enumerations.html': {},
          },
        },
      ],
      [
        'google_callback_url',
        {
          _index: 79,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'google_client_id',
        {
          _index: 77,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'google_client_secret',
        {
          _index: 78,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'googleauthguard',
        {
          _index: 169,
          title: { 'injectables/GoogleAuthGuard.html': {} },
          body: {
            'controllers/AuthController.html': {},
            'injectables/GoogleAuthGuard.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'googleauthstrategy',
        {
          _index: 211,
          title: { 'injectables/GoogleAuthStrategy.html': {} },
          body: {
            'modules/AuthModule.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'googlelogin',
        {
          _index: 105,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'googlelogincallback',
        {
          _index: 106,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'googlelogincallback(@req',
        {
          _index: 197,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'googlelogincallback(req',
        {
          _index: 129,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      ['grade', { _index: 595, title: {}, body: { 'entities/User.html': {} } }],
      [
        'graph',
        {
          _index: 780,
          title: {},
          body: { 'index.html': {}, 'modules.html': {} },
        },
      ],
      [
        'gravatar',
        {
          _index: 609,
          title: {},
          body: { 'entities/User.html': {}, 'dependencies.html': {} },
        },
      ],
      [
        'gravatar.url(this.profileimg',
        {
          _index: 619,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      ['grow', { _index: 805, title: {}, body: { 'index.html': {} } }],
      [
        'hands',
        {
          _index: 773,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      ['handy', { _index: 760, title: {}, body: { 'index.html': {} } }],
      [
        'hapi/joi',
        {
          _index: 54,
          title: {},
          body: { 'modules/AppModule.html': {}, 'dependencies.html': {} },
        },
      ],
      [
        'hello',
        {
          _index: 94,
          title: {},
          body: { 'injectables/AppService.html': {} },
        },
      ],
      ['help', { _index: 787, title: {}, body: { 'index.html': {} } }],
      [
        'here',
        {
          _index: 813,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      [
        'host',
        {
          _index: 361,
          title: {},
          body: { 'modules/DbModule.html': {}, 'modules/RedisModule.html': {} },
        },
      ],
      [
        'httpexception',
        {
          _index: 255,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
          },
        },
      ],
      [
        'https',
        {
          _index: 627,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      [
        'https://nestjs.com',
        {
          _index: 819,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      [
        'httpstatus',
        {
          _index: 152,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
          },
        },
      ],
      [
        'httpstatus.bad_request',
        {
          _index: 284,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'httpstatus.conflict',
        {
          _index: 430,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
          },
        },
      ],
      [
        'httpstatus.not_found',
        {
          _index: 280,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'httpstatus.ok',
        {
          _index: 195,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'id',
        {
          _index: 304,
          title: {},
          body: {
            'classes/BaseEntity.html': {},
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      ['identifier', { _index: 652, title: {}, body: { 'coverage.html': {} } }],
      [
        'import',
        {
          _index: 16,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'classes/BaseEntity.html': {},
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
            'modules/DbModule.html': {},
            'modules/EmailModule.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthGuard.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthGuard.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthGuard.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'classes/LoginUserDto.html': {},
            'injectables/NaverAuthGuard.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'entities/Product.html': {},
            'controllers/ProductController.html': {},
            'modules/ProductModule.html': {},
            'injectables/ProductService.html': {},
            'modules/RedisModule.html': {},
            'interfaces/RequestUserInterface.html': {},
            'injectables/TokenGuard.html': {},
            'injectables/TokenStrategy.html': {},
            'classes/UpdateAuthDto.html': {},
            'classes/UpdateProductDto.html': {},
            'classes/UpdateUserDto.html': {},
            'entities/User.html': {},
            'controllers/UserController.html': {},
            'modules/UserModule.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      [
        'imports',
        {
          _index: 50,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/DbModule.html': {},
            'modules/EmailModule.html': {},
            'modules/ProductModule.html': {},
            'modules/RedisModule.html': {},
            'modules/UserModule.html': {},
          },
        },
      ],
      [
        'index',
        {
          _index: 7,
          title: { 'index.html': {} },
          body: {
            'controllers/AppController.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/BaseEntity.html': {},
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'classes/LoginUserDto.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'entities/Product.html': {},
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
            'interfaces/RequestUserInterface.html': {},
            'interfaces/TokenInterface.html': {},
            'injectables/TokenStrategy.html': {},
            'entities/User.html': {},
            'injectables/UserService.html': {},
            'miscellaneous/enumerations.html': {},
            'miscellaneous/functions.html': {},
          },
        },
      ],
      [
        'info',
        {
          _index: 3,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'classes/Auth.html': {},
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'classes/BaseEntity.html': {},
            'classes/CreateAuthDto.html': {},
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
            'modules/DbModule.html': {},
            'modules/EmailModule.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthGuard.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthGuard.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthGuard.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'classes/LoginUserDto.html': {},
            'injectables/NaverAuthGuard.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'entities/Product.html': {},
            'controllers/ProductController.html': {},
            'modules/ProductModule.html': {},
            'injectables/ProductService.html': {},
            'modules/RedisModule.html': {},
            'interfaces/RequestUserInterface.html': {},
            'injectables/TokenGuard.html': {},
            'interfaces/TokenInterface.html': {},
            'injectables/TokenStrategy.html': {},
            'classes/UpdateAuthDto.html': {},
            'classes/UpdateProductDto.html': {},
            'classes/UpdateUserDto.html': {},
            'entities/User.html': {},
            'controllers/UserController.html': {},
            'modules/UserModule.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      [
        'inject',
        {
          _index: 256,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'modules/DbModule.html': {},
            'modules/RedisModule.html': {},
          },
        },
      ],
      [
        'inject(cache_manager',
        {
          _index: 269,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'injectable',
        {
          _index: 90,
          title: {
            'injectables/AppService.html': {},
            'injectables/AuthService.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthGuard.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthGuard.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthGuard.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'injectables/NaverAuthGuard.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'injectables/ProductService.html': {},
            'injectables/TokenGuard.html': {},
            'injectables/TokenStrategy.html': {},
            'injectables/UserService.html': {},
          },
          body: {
            'injectables/AppService.html': {},
            'injectables/AuthService.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthGuard.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthGuard.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthGuard.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'injectables/NaverAuthGuard.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'injectables/ProductService.html': {},
            'injectables/TokenGuard.html': {},
            'injectables/TokenStrategy.html': {},
            'injectables/UserService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'injectables',
        {
          _index: 91,
          title: {},
          body: {
            'injectables/AppService.html': {},
            'injectables/AuthService.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthGuard.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthGuard.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthGuard.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'injectables/NaverAuthGuard.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'injectables/ProductService.html': {},
            'injectables/TokenGuard.html': {},
            'injectables/TokenStrategy.html': {},
            'injectables/UserService.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'injectrepository',
        {
          _index: 541,
          title: {},
          body: {
            'injectables/ProductService.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      [
        'injectrepository(product',
        {
          _index: 542,
          title: {},
          body: { 'injectables/ProductService.html': {} },
        },
      ],
      [
        'injectrepository(user',
        {
          _index: 648,
          title: {},
          body: { 'injectables/UserService.html': {} },
        },
      ],
      [
        'installcompile',
        { _index: 741, title: {}, body: { 'index.html': {} } },
      ],
      [
        'interact',
        {
          _index: 781,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      [
        'interface',
        {
          _index: 560,
          title: {
            'interfaces/RequestUserInterface.html': {},
            'interfaces/TokenInterface.html': {},
          },
          body: {
            'interfaces/RequestUserInterface.html': {},
            'interfaces/TokenInterface.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'interfaces',
        {
          _index: 561,
          title: {},
          body: {
            'interfaces/RequestUserInterface.html': {},
            'interfaces/TokenInterface.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'isemail',
        {
          _index: 353,
          title: {},
          body: {
            'classes/CreateUserDto.html': {},
            'classes/LoginUserDto.html': {},
          },
        },
      ],
      [
        'isglobal',
        {
          _index: 559,
          title: {},
          body: { 'modules/RedisModule.html': {} },
        },
      ],
      [
        'isnumber',
        {
          _index: 337,
          title: {},
          body: {
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
          },
        },
      ],
      [
        'isstring',
        {
          _index: 338,
          title: {},
          body: {
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
            'classes/LoginUserDto.html': {},
          },
        },
      ],
      ['job', { _index: 798, title: {}, body: { 'index.html': {} } }],
      [
        'jobs',
        {
          _index: 800,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      [
        'joi',
        {
          _index: 53,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'joi.number().required',
        {
          _index: 70,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'joi.object',
        {
          _index: 64,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'joi.string().required',
        {
          _index: 66,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      ['join', { _index: 811, title: {}, body: { 'index.html': {} } }],
      [
        'jwt',
        {
          _index: 574,
          title: {},
          body: {
            'injectables/TokenStrategy.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'jwtfromrequest',
        {
          _index: 575,
          title: {},
          body: { 'injectables/TokenStrategy.html': {} },
        },
      ],
      [
        'jwtmodule',
        {
          _index: 218,
          title: {},
          body: { 'modules/AuthModule.html': {} },
        },
      ],
      [
        'jwtmodule.register',
        {
          _index: 226,
          title: {},
          body: { 'modules/AuthModule.html': {} },
        },
      ],
      [
        'jwtservice',
        {
          _index: 239,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'kakao',
        {
          _index: 443,
          title: {},
          body: {
            'injectables/KakaoAuthStrategy.html': {},
            'dependencies.html': {},
            'miscellaneous/enumerations.html': {},
          },
        },
      ],
      [
        'kakao_callback_url',
        {
          _index: 81,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'kakao_client_id',
        {
          _index: 80,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'kakaoauthguard',
        {
          _index: 171,
          title: { 'injectables/KakaoAuthGuard.html': {} },
          body: {
            'controllers/AuthController.html': {},
            'injectables/KakaoAuthGuard.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'kakaoauthstrategy',
        {
          _index: 212,
          title: { 'injectables/KakaoAuthStrategy.html': {} },
          body: {
            'modules/AuthModule.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'kakaologin',
        {
          _index: 107,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'kakaologincallback',
        {
          _index: 108,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'kakaologincallback(@req',
        {
          _index: 201,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'kakaologincallback(req',
        {
          _index: 134,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      ['kamil', { _index: 816, title: {}, body: { 'index.html': {} } }],
      [
        'key',
        {
          _index: 647,
          title: {},
          body: { 'injectables/UserService.html': {} },
        },
      ],
      ['learn', { _index: 764, title: {}, body: { 'index.html': {} } }],
      [
        'legend',
        {
          _index: 32,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/EmailModule.html': {},
            'modules/ProductModule.html': {},
            'modules/UserModule.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'license',
        {
          _index: 822,
          title: {},
          body: { 'index.html': {}, 'properties.html': {} },
        },
      ],
      ['licensed', { _index: 803, title: {}, body: { 'index.html': {} } }],
      [
        'linkedin',
        {
          _index: 796,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      [
        'load',
        {
          _index: 290,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'injectables/TokenStrategy.html': {},
          },
        },
      ],
      [
        'load.userid',
        {
          _index: 580,
          title: {},
          body: { 'injectables/TokenStrategy.html': {} },
        },
      ],
      [
        'local',
        {
          _index: 456,
          title: {},
          body: {
            'injectables/LocalAuthStrategy.html': {},
            'entities/User.html': {},
            'dependencies.html': {},
            'miscellaneous/enumerations.html': {},
          },
        },
      ],
      [
        'localauthguard',
        {
          _index: 160,
          title: { 'injectables/LocalAuthGuard.html': {} },
          body: {
            'controllers/AuthController.html': {},
            'injectables/LocalAuthGuard.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'localauthstrategy',
        {
          _index: 213,
          title: { 'injectables/LocalAuthStrategy.html': {} },
          body: {
            'modules/AuthModule.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'login',
        {
          _index: 109,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
          },
        },
      ],
      [
        'login(@req',
        {
          _index: 187,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'login(dto',
        {
          _index: 249,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'login(req',
        {
          _index: 137,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'loginuserdto',
        {
          _index: 139,
          title: { 'classes/LoginUserDto.html': {} },
          body: {
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/LoginUserDto.html': {},
            'coverage.html': {},
          },
        },
      ],
      ['looking', { _index: 797, title: {}, body: { 'index.html': {} } }],
      [
        'loop',
        {
          _index: 792,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      [
        'mail',
        {
          _index: 380,
          title: {},
          body: { 'injectables/EmailService.html': {} },
        },
      ],
      [
        'mail.options',
        {
          _index: 384,
          title: {},
          body: { 'injectables/EmailService.html': {} },
        },
      ],
      [
        'manager',
        {
          _index: 267,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'modules/RedisModule.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'matching',
        {
          _index: 27,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'classes/Auth.html': {},
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'classes/BaseEntity.html': {},
            'classes/CreateAuthDto.html': {},
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
            'modules/DbModule.html': {},
            'modules/EmailModule.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthGuard.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthGuard.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthGuard.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'classes/LoginUserDto.html': {},
            'injectables/NaverAuthGuard.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'entities/Product.html': {},
            'controllers/ProductController.html': {},
            'modules/ProductModule.html': {},
            'injectables/ProductService.html': {},
            'modules/RedisModule.html': {},
            'interfaces/RequestUserInterface.html': {},
            'injectables/TokenGuard.html': {},
            'interfaces/TokenInterface.html': {},
            'injectables/TokenStrategy.html': {},
            'classes/UpdateAuthDto.html': {},
            'classes/UpdateProductDto.html': {},
            'classes/UpdateUserDto.html': {},
            'entities/User.html': {},
            'controllers/UserController.html': {},
            'modules/UserModule.html': {},
            'injectables/UserService.html': {},
            'coverage.html': {},
            'dependencies.html': {},
            'miscellaneous/enumerations.html': {},
            'miscellaneous/functions.html': {},
            'index.html': {},
            'modules.html': {},
            'overview.html': {},
            'properties.html': {},
          },
        },
      ],
      [
        'metadata',
        { _index: 713, title: {}, body: { 'dependencies.html': {} } },
      ],
      [
        'methods',
        {
          _index: 8,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
            'injectables/TokenStrategy.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      [
        'miscellaneous',
        {
          _index: 717,
          title: {
            'miscellaneous/enumerations.html': {},
            'miscellaneous/functions.html': {},
          },
          body: {
            'miscellaneous/enumerations.html': {},
            'miscellaneous/functions.html': {},
          },
        },
      ],
      ['mit', { _index: 802, title: {}, body: { 'index.html': {} } }],
      [
        'mm',
        {
          _index: 625,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      ['mode', { _index: 746, title: {}, body: { 'index.html': {} } }],
      [
        'module',
        {
          _index: 28,
          title: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/DbModule.html': {},
            'modules/EmailModule.html': {},
            'modules/ProductModule.html': {},
            'modules/RedisModule.html': {},
            'modules/UserModule.html': {},
          },
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/DbModule.html': {},
            'modules/EmailModule.html': {},
            'modules/ProductModule.html': {},
            'modules/RedisModule.html': {},
            'modules/UserModule.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'modules',
        {
          _index: 30,
          title: { 'modules.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/DbModule.html': {},
            'modules/EmailModule.html': {},
            'modules/ProductModule.html': {},
            'modules/RedisModule.html': {},
            'modules/UserModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      ['more', { _index: 765, title: {}, body: { 'index.html': {} } }],
      [
        'myśliwiec',
        {
          _index: 817,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      [
        'name',
        {
          _index: 118,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/CreateProductDto.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'entities/Product.html': {},
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
            'injectables/TokenStrategy.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      [
        'naver',
        {
          _index: 467,
          title: {},
          body: {
            'injectables/NaverAuthStrategy.html': {},
            'dependencies.html': {},
            'miscellaneous/enumerations.html': {},
          },
        },
      ],
      [
        'naver_callback_url',
        {
          _index: 84,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'naver_client_id',
        {
          _index: 82,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'naver_client_secret',
        {
          _index: 83,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'naverauthguard',
        {
          _index: 173,
          title: { 'injectables/NaverAuthGuard.html': {} },
          body: {
            'controllers/AuthController.html': {},
            'injectables/NaverAuthGuard.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'naverauthstrategy',
        {
          _index: 214,
          title: { 'injectables/NaverAuthStrategy.html': {} },
          body: {
            'modules/AuthModule.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'naverlogin',
        {
          _index: 110,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'naverlogincallback',
        {
          _index: 111,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'naverlogincallback(@req',
        {
          _index: 205,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'naverlogincallback(req',
        {
          _index: 143,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      ['need', { _index: 786, title: {}, body: { 'index.html': {} } }],
      [
        'nest',
        {
          _index: 734,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      ['nestframework', { _index: 821, title: {}, body: { 'index.html': {} } }],
      [
        'nestjs',
        {
          _index: 762,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      [
        'nestjs/common',
        {
          _index: 17,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'modules/DbModule.html': {},
            'modules/EmailModule.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthGuard.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthGuard.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthGuard.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'injectables/NaverAuthGuard.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'controllers/ProductController.html': {},
            'modules/ProductModule.html': {},
            'injectables/ProductService.html': {},
            'modules/RedisModule.html': {},
            'injectables/TokenGuard.html': {},
            'injectables/TokenStrategy.html': {},
            'controllers/UserController.html': {},
            'modules/UserModule.html': {},
            'injectables/UserService.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'nestjs/common/cache',
        {
          _index: 266,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'modules/RedisModule.html': {},
          },
        },
      ],
      [
        'nestjs/config',
        {
          _index: 52,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'modules/DbModule.html': {},
            'modules/EmailModule.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'modules/RedisModule.html': {},
            'injectables/TokenStrategy.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'nestjs/core',
        {
          _index: 674,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      [
        'nestjs/jwt',
        {
          _index: 219,
          title: {},
          body: {
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'nestjs/mapped',
        {
          _index: 585,
          title: {},
          body: {
            'classes/UpdateAuthDto.html': {},
            'classes/UpdateProductDto.html': {},
            'classes/UpdateUserDto.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'nestjs/passport',
        {
          _index: 401,
          title: {},
          body: {
            'injectables/GoogleAuthGuard.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthGuard.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthGuard.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'injectables/NaverAuthGuard.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'injectables/TokenGuard.html': {},
            'injectables/TokenStrategy.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'nestjs/platform',
        {
          _index: 677,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      [
        'nestjs/swagger',
        {
          _index: 167,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
            'classes/LoginUserDto.html': {},
            'controllers/ProductController.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'nestjs/typeorm',
        {
          _index: 356,
          title: {},
          body: {
            'modules/DbModule.html': {},
            'modules/ProductModule.html': {},
            'injectables/ProductService.html': {},
            'modules/UserModule.html': {},
            'injectables/UserService.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'new',
        {
          _index: 279,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'injectables/ProductService.html': {},
            'injectables/UserService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'newuser',
        {
          _index: 437,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
          },
        },
      ],
      ['node.js', { _index: 726, title: {}, body: { 'index.html': {} } }],
      [
        'nodemailer',
        {
          _index: 388,
          title: {},
          body: {
            'injectables/EmailService.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'nodemailer/lib/mailer',
        {
          _index: 389,
          title: {},
          body: { 'injectables/EmailService.html': {} },
        },
      ],
      [
        'notfoundexception',
        {
          _index: 540,
          title: {},
          body: {
            'injectables/ProductService.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      ['npm', { _index: 740, title: {}, body: { 'index.html': {} } }],
      [
        'nullable',
        {
          _index: 612,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      [
        'number',
        {
          _index: 332,
          title: {},
          body: {
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
            'entities/Product.html': {},
            'entities/User.html': {},
          },
        },
      ],
      [
        'oauth2',
        {
          _index: 417,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'dependencies.html': {},
          },
        },
      ],
      ['offer', { _index: 799, title: {}, body: { 'index.html': {} } }],
      [
        'official',
        {
          _index: 775,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      ['open', { _index: 804, title: {}, body: { 'index.html': {} } }],
      [
        'optional',
        {
          _index: 120,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/CreateUserDto.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'classes/LoginUserDto.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
            'injectables/TokenStrategy.html': {},
            'entities/User.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      [
        'options',
        {
          _index: 386,
          title: {},
          body: { 'injectables/EmailService.html': {} },
        },
      ],
      [
        'otp',
        {
          _index: 296,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'out',
        {
          _index: 48,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/EmailModule.html': {},
            'modules/ProductModule.html': {},
            'modules/UserModule.html': {},
            'index.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'overview',
        {
          _index: 827,
          title: { 'overview.html': {} },
          body: { 'overview.html': {} },
        },
      ],
      [
        'package',
        {
          _index: 668,
          title: { 'dependencies.html': {}, 'properties.html': {} },
          body: {},
        },
      ],
      [
        'param',
        {
          _index: 505,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      [
        'parameters',
        {
          _index: 117,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
            'injectables/TokenStrategy.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      ['parser', { _index: 684, title: {}, body: { 'dependencies.html': {} } }],
      [
        'part',
        {
          _index: 788,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      [
        'partialtype',
        {
          _index: 584,
          title: {},
          body: {
            'classes/UpdateAuthDto.html': {},
            'classes/UpdateProductDto.html': {},
            'classes/UpdateUserDto.html': {},
          },
        },
      ],
      [
        'partialtype(createauthdto',
        {
          _index: 583,
          title: {},
          body: { 'classes/UpdateAuthDto.html': {} },
        },
      ],
      [
        'partialtype(createproductdto',
        {
          _index: 590,
          title: {},
          body: { 'classes/UpdateProductDto.html': {} },
        },
      ],
      [
        'partialtype(createuserdto',
        {
          _index: 593,
          title: {},
          body: { 'classes/UpdateUserDto.html': {} },
        },
      ],
      [
        'pass',
        {
          _index: 282,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'injectables/EmailService.html': {},
          },
        },
      ],
      [
        'passport',
        {
          _index: 415,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'injectables/TokenStrategy.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'passportstrategy',
        {
          _index: 404,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'injectables/TokenStrategy.html': {},
          },
        },
      ],
      [
        'passportstrategy(strategy',
        {
          _index: 569,
          title: {},
          body: { 'injectables/TokenStrategy.html': {} },
        },
      ],
      [
        'password',
        {
          _index: 342,
          title: {},
          body: {
            'classes/CreateUserDto.html': {},
            'modules/DbModule.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'classes/LoginUserDto.html': {},
            'entities/User.html': {},
          },
        },
      ],
      [
        'pg',
        {
          _index: 623,
          title: {},
          body: { 'entities/User.html': {}, 'dependencies.html': {} },
        },
      ],
      [
        'phone',
        {
          _index: 343,
          title: {},
          body: { 'classes/CreateUserDto.html': {}, 'entities/User.html': {} },
        },
      ],
      [
        'picture',
        {
          _index: 427,
          title: {},
          body: { 'injectables/GoogleAuthStrategy.html': {} },
        },
      ],
      ['please', { _index: 768, title: {}, body: { 'index.html': {} } }],
      [
        'port',
        {
          _index: 365,
          title: {},
          body: { 'modules/DbModule.html': {}, 'modules/RedisModule.html': {} },
        },
      ],
      [
        'post',
        {
          _index: 153,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'controllers/ProductController.html': {},
          },
        },
      ],
      [
        "post('/create",
        {
          _index: 517,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      [
        "post('/create')@apibody({type",
        {
          _index: 490,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      [
        "post('/email/send",
        {
          _index: 124,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        "post('/login",
        {
          _index: 185,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        "post('/login')@useguards(localauthguard)@apibody({type",
        {
          _index: 138,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        "post('/signup",
        {
          _index: 178,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        "post('/signup')@apibody({type",
        {
          _index: 148,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'postgres',
        {
          _index: 360,
          title: {},
          body: { 'modules/DbModule.html': {} },
        },
      ],
      [
        'postgres_db',
        {
          _index: 71,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'postgres_host',
        {
          _index: 65,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'postgres_password',
        {
          _index: 68,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'postgres_port',
        {
          _index: 69,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'postgres_user',
        {
          _index: 67,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'prefix',
        {
          _index: 101,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'controllers/ProductController.html': {},
            'controllers/UserController.html': {},
          },
        },
      ],
      [
        'price',
        {
          _index: 326,
          title: {},
          body: {
            'classes/CreateProductDto.html': {},
            'entities/Product.html': {},
          },
        },
      ],
      [
        'primarygeneratedcolumn',
        {
          _index: 315,
          title: {},
          body: { 'classes/BaseEntity.html': {} },
        },
      ],
      [
        "primarygeneratedcolumn('uuid",
        {
          _index: 311,
          title: {},
          body: { 'classes/BaseEntity.html': {} },
        },
      ],
      [
        'private',
        {
          _index: 268,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'injectables/ProductService.html': {},
            'injectables/TokenStrategy.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      [
        'product',
        {
          _index: 473,
          title: { 'entities/Product.html': {} },
          body: {
            'entities/Product.html': {},
            'controllers/ProductController.html': {},
            'modules/ProductModule.html': {},
            'injectables/ProductService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'product.dto',
        {
          _index: 510,
          title: {},
          body: {
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
            'classes/UpdateProductDto.html': {},
          },
        },
      ],
      [
        'product.dto.ts',
        {
          _index: 323,
          title: {},
          body: {
            'classes/CreateProductDto.html': {},
            'classes/UpdateProductDto.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'product.dto.ts:11',
        {
          _index: 334,
          title: {},
          body: { 'classes/CreateProductDto.html': {} },
        },
      ],
      [
        'product.dto.ts:15',
        {
          _index: 330,
          title: {},
          body: { 'classes/CreateProductDto.html': {} },
        },
      ],
      [
        'product.dto.ts:19',
        {
          _index: 329,
          title: {},
          body: { 'classes/CreateProductDto.html': {} },
        },
      ],
      [
        'product.dto.ts:23',
        {
          _index: 335,
          title: {},
          body: { 'classes/CreateProductDto.html': {} },
        },
      ],
      [
        'product.dto.ts:7',
        {
          _index: 331,
          title: {},
          body: { 'classes/CreateProductDto.html': {} },
        },
      ],
      [
        'product/dto/create',
        {
          _index: 509,
          title: {},
          body: {
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
            'classes/UpdateProductDto.html': {},
          },
        },
      ],
      [
        'product/dto/update',
        {
          _index: 511,
          title: {},
          body: {
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
          },
        },
      ],
      [
        'product/entities/base.entity',
        {
          _index: 482,
          title: {},
          body: { 'entities/Product.html': {}, 'entities/User.html': {} },
        },
      ],
      [
        'product/entities/product.entity',
        {
          _index: 528,
          title: {},
          body: {
            'modules/ProductModule.html': {},
            'injectables/ProductService.html': {},
          },
        },
      ],
      [
        'product/product.controller',
        {
          _index: 529,
          title: {},
          body: { 'modules/ProductModule.html': {} },
        },
      ],
      [
        'product/product.module',
        {
          _index: 55,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'product/product.service',
        {
          _index: 508,
          title: {},
          body: {
            'controllers/ProductController.html': {},
            'modules/ProductModule.html': {},
          },
        },
      ],
      [
        'productcontroller',
        {
          _index: 484,
          title: { 'controllers/ProductController.html': {} },
          body: {
            'controllers/ProductController.html': {},
            'modules/ProductModule.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'productid',
        {
          _index: 500,
          title: {},
          body: {
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
          },
        },
      ],
      [
        'productimg',
        {
          _index: 327,
          title: {},
          body: {
            'classes/CreateProductDto.html': {},
            'entities/Product.html': {},
          },
        },
      ],
      ['production', { _index: 748, title: {}, body: { 'index.html': {} } }],
      [
        'productmodule',
        {
          _index: 43,
          title: { 'modules/ProductModule.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/ProductModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'productservice',
        {
          _index: 507,
          title: { 'injectables/ProductService.html': {} },
          body: {
            'controllers/ProductController.html': {},
            'modules/ProductModule.html': {},
            'injectables/ProductService.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'profile',
        {
          _index: 411,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
          },
        },
      ],
      [
        'profile._json',
        {
          _index: 471,
          title: {},
          body: { 'injectables/NaverAuthStrategy.html': {} },
        },
      ],
      [
        'profile._json.kakao_account',
        {
          _index: 448,
          title: {},
          body: { 'injectables/KakaoAuthStrategy.html': {} },
        },
      ],
      [
        'profile._json.properties',
        {
          _index: 447,
          title: {},
          body: { 'injectables/KakaoAuthStrategy.html': {} },
        },
      ],
      [
        'profile_image',
        {
          _index: 446,
          title: {},
          body: {
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
          },
        },
      ],
      [
        'profileimg',
        {
          _index: 344,
          title: {},
          body: {
            'classes/CreateUserDto.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'entities/User.html': {},
          },
        },
      ],
      ['progressive', { _index: 725, title: {}, body: { 'index.html': {} } }],
      [
        'project',
        {
          _index: 737,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      [
        'properties',
        {
          _index: 301,
          title: { 'properties.html': {} },
          body: {
            'classes/BaseEntity.html': {},
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
            'injectables/EmailService.html': {},
            'classes/LoginUserDto.html': {},
            'entities/Product.html': {},
            'interfaces/RequestUserInterface.html': {},
            'interfaces/TokenInterface.html': {},
            'entities/User.html': {},
            'properties.html': {},
          },
        },
      ],
      [
        'protocol',
        {
          _index: 626,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      [
        'provider',
        {
          _index: 263,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'classes/CreateUserDto.html': {},
            'injectables/GoogleAuthGuard.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthGuard.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthGuard.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'injectables/NaverAuthGuard.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'entities/User.html': {},
            'miscellaneous/enumerations.html': {},
          },
        },
      ],
      [
        'provider.google',
        {
          _index: 406,
          title: {},
          body: { 'injectables/GoogleAuthStrategy.html': {} },
        },
      ],
      [
        'provider.kakao',
        {
          _index: 441,
          title: {},
          body: { 'injectables/KakaoAuthStrategy.html': {} },
        },
      ],
      [
        'provider.local',
        {
          _index: 271,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'entities/User.html': {},
          },
        },
      ],
      [
        'provider.naver',
        {
          _index: 465,
          title: {},
          body: { 'injectables/NaverAuthStrategy.html': {} },
        },
      ],
      [
        'providers',
        {
          _index: 35,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/EmailModule.html': {},
            'modules/ProductModule.html': {},
            'modules/UserModule.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'public',
        {
          _index: 230,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'classes/BaseEntity.html': {},
            'entities/Product.html': {},
            'entities/User.html': {},
          },
        },
      ],
      [
        'put',
        {
          _index: 506,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      [
        "put('/:id",
        {
          _index: 522,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      [
        "put('/:id')@apibody({type",
        {
          _index: 503,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      ['questions', { _index: 766, title: {}, body: { 'index.html': {} } }],
      [
        'r',
        {
          _index: 622,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      ['read', { _index: 812, title: {}, body: { 'index.html': {} } }],
      [
        'readonly',
        {
          _index: 23,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'controllers/ProductController.html': {},
            'injectables/TokenStrategy.html': {},
            'controllers/UserController.html': {},
          },
        },
      ],
      ['real', { _index: 782, title: {}, body: { 'index.html': {} } }],
      [
        'redis',
        {
          _index: 552,
          title: {},
          body: { 'modules/RedisModule.html': {}, 'dependencies.html': {} },
        },
      ],
      [
        'redis/redis.module',
        {
          _index: 61,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'redis_host',
        {
          _index: 85,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'redis_port',
        {
          _index: 86,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'redis_ttl',
        {
          _index: 87,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'redismodule',
        {
          _index: 44,
          title: { 'modules/RedisModule.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/RedisModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'redisstore',
        {
          _index: 551,
          title: {},
          body: { 'modules/RedisModule.html': {} },
        },
      ],
      [
        'reflect',
        {
          _index: 712,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      [
        'refreshtoken',
        {
          _index: 410,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
          },
        },
      ],
      [
        'repository',
        {
          _index: 533,
          title: {},
          body: {
            'injectables/ProductService.html': {},
            'injectables/UserService.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'req',
        {
          _index: 121,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'req.user',
        {
          _index: 188,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'request',
        {
          _index: 563,
          title: {},
          body: { 'interfaces/RequestUserInterface.html': {} },
        },
      ],
      [
        'requestuserinterface',
        {
          _index: 114,
          title: { 'interfaces/RequestUserInterface.html': {} },
          body: {
            'controllers/AuthController.html': {},
            'interfaces/RequestUserInterface.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'reset',
        {
          _index: 47,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/EmailModule.html': {},
            'modules/ProductModule.html': {},
            'modules/UserModule.html': {},
            'overview.html': {},
          },
        },
      ],
      ['resources', { _index: 758, title: {}, body: { 'index.html': {} } }],
      [
        'results',
        {
          _index: 26,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'classes/Auth.html': {},
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'classes/BaseEntity.html': {},
            'classes/CreateAuthDto.html': {},
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
            'modules/DbModule.html': {},
            'modules/EmailModule.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthGuard.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthGuard.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthGuard.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'classes/LoginUserDto.html': {},
            'injectables/NaverAuthGuard.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'entities/Product.html': {},
            'controllers/ProductController.html': {},
            'modules/ProductModule.html': {},
            'injectables/ProductService.html': {},
            'modules/RedisModule.html': {},
            'interfaces/RequestUserInterface.html': {},
            'injectables/TokenGuard.html': {},
            'interfaces/TokenInterface.html': {},
            'injectables/TokenStrategy.html': {},
            'classes/UpdateAuthDto.html': {},
            'classes/UpdateProductDto.html': {},
            'classes/UpdateUserDto.html': {},
            'entities/User.html': {},
            'controllers/UserController.html': {},
            'modules/UserModule.html': {},
            'injectables/UserService.html': {},
            'coverage.html': {},
            'dependencies.html': {},
            'miscellaneous/enumerations.html': {},
            'miscellaneous/functions.html': {},
            'index.html': {},
            'modules.html': {},
            'overview.html': {},
            'properties.html': {},
          },
        },
      ],
      [
        'return',
        {
          _index: 24,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'injectables/EmailService.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
            'modules/RedisModule.html': {},
            'injectables/TokenStrategy.html': {},
            'entities/User.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      [
        'returns',
        {
          _index: 14,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
            'injectables/TokenStrategy.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      [
        'root/app.controller',
        {
          _index: 60,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'root/app.service',
        {
          _index: 19,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
          },
        },
      ],
      ['run', { _index: 742, title: {}, body: { 'index.html': {} } }],
      [
        'rxjs',
        {
          _index: 714,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      ['s', { _index: 620, title: {}, body: { 'entities/User.html': {} } }],
      [
        'saltvalue',
        {
          _index: 615,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      ['scalable', { _index: 730, title: {}, body: { 'index.html': {} } }],
      [
        'scope',
        {
          _index: 425,
          title: {},
          body: { 'injectables/GoogleAuthStrategy.html': {} },
        },
      ],
      [
        'secret',
        {
          _index: 292,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'secretorkey',
        {
          _index: 577,
          title: {},
          body: { 'injectables/TokenStrategy.html': {} },
        },
      ],
      [
        'sendemailotp',
        {
          _index: 232,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'sendemailotp(email',
        {
          _index: 251,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'sendmail',
        {
          _index: 381,
          title: {},
          body: { 'injectables/EmailService.html': {} },
        },
      ],
      [
        'sendmail(options',
        {
          _index: 383,
          title: {},
          body: { 'injectables/EmailService.html': {} },
        },
      ],
      ['server', { _index: 731, title: {}, body: { 'index.html': {} } }],
      [
        'service',
        {
          _index: 391,
          title: {},
          body: { 'injectables/EmailService.html': {} },
        },
      ],
      ['setup', { _index: 738, title: {}, body: { 'index.html': {} } }],
      [
        'side',
        {
          _index: 732,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      [
        'signup',
        {
          _index: 112,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'signup(@body',
        {
          _index: 179,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'signup(dto',
        {
          _index: 146,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'signupmail',
        {
          _index: 233,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'signupmail(email',
        {
          _index: 253,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'source',
        {
          _index: 4,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'classes/Auth.html': {},
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'classes/BaseEntity.html': {},
            'classes/CreateAuthDto.html': {},
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
            'modules/DbModule.html': {},
            'modules/EmailModule.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthGuard.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthGuard.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthGuard.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'classes/LoginUserDto.html': {},
            'injectables/NaverAuthGuard.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'entities/Product.html': {},
            'controllers/ProductController.html': {},
            'modules/ProductModule.html': {},
            'injectables/ProductService.html': {},
            'modules/RedisModule.html': {},
            'interfaces/RequestUserInterface.html': {},
            'injectables/TokenGuard.html': {},
            'interfaces/TokenInterface.html': {},
            'injectables/TokenStrategy.html': {},
            'classes/UpdateAuthDto.html': {},
            'classes/UpdateProductDto.html': {},
            'classes/UpdateUserDto.html': {},
            'entities/User.html': {},
            'controllers/UserController.html': {},
            'modules/UserModule.html': {},
            'injectables/UserService.html': {},
            'index.html': {},
          },
        },
      ],
      ['sponsors', { _index: 807, title: {}, body: { 'index.html': {} } }],
      [
        'src/.../main.ts',
        {
          _index: 722,
          title: {},
          body: { 'miscellaneous/functions.html': {} },
        },
      ],
      [
        'src/.../provider.enum.ts',
        {
          _index: 719,
          title: {},
          body: { 'miscellaneous/enumerations.html': {} },
        },
      ],
      [
        'src/app.controller.ts',
        {
          _index: 6,
          title: {},
          body: { 'controllers/AppController.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/app.controller.ts:9',
        {
          _index: 13,
          title: {},
          body: { 'controllers/AppController.html': {} },
        },
      ],
      [
        'src/app.module.ts',
        {
          _index: 49,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'src/app.service.ts',
        {
          _index: 92,
          title: {},
          body: { 'injectables/AppService.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/app.service.ts:5',
        {
          _index: 93,
          title: {},
          body: { 'injectables/AppService.html': {} },
        },
      ],
      [
        'src/auth/auth.controller.ts',
        {
          _index: 100,
          title: {},
          body: { 'controllers/AuthController.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/auth/auth.controller.ts:107',
        {
          _index: 125,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'src/auth/auth.controller.ts:29',
        {
          _index: 149,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'src/auth/auth.controller.ts:40',
        {
          _index: 140,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'src/auth/auth.controller.ts:50',
        {
          _index: 116,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'src/auth/auth.controller.ts:57',
        {
          _index: 128,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'src/auth/auth.controller.ts:64',
        {
          _index: 131,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'src/auth/auth.controller.ts:74',
        {
          _index: 133,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'src/auth/auth.controller.ts:81',
        {
          _index: 136,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'src/auth/auth.controller.ts:91',
        {
          _index: 142,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'src/auth/auth.controller.ts:98',
        {
          _index: 145,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'src/auth/auth.module.ts',
        {
          _index: 216,
          title: {},
          body: { 'modules/AuthModule.html': {} },
        },
      ],
      [
        'src/auth/auth.service.ts',
        {
          _index: 227,
          title: {},
          body: { 'injectables/AuthService.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/auth/auth.service.ts:15',
        {
          _index: 242,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'src/auth/auth.service.ts:25',
        {
          _index: 244,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'src/auth/auth.service.ts:34',
        {
          _index: 250,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'src/auth/auth.service.ts:58',
        {
          _index: 254,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'src/auth/auth.service.ts:67',
        {
          _index: 247,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'src/auth/auth.service.ts:77',
        {
          _index: 252,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'src/auth/auth.service.ts:91',
        {
          _index: 245,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'src/auth/dto/create',
        {
          _index: 319,
          title: {},
          body: { 'classes/CreateAuthDto.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/auth/dto/update',
        {
          _index: 582,
          title: {},
          body: { 'classes/UpdateAuthDto.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/auth/entities/auth.entity.ts',
        {
          _index: 98,
          title: {},
          body: { 'classes/Auth.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/auth/guard/google',
        {
          _index: 396,
          title: {},
          body: { 'injectables/GoogleAuthGuard.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/auth/guard/kakao',
        {
          _index: 438,
          title: {},
          body: { 'injectables/KakaoAuthGuard.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/auth/guard/local',
        {
          _index: 449,
          title: {},
          body: { 'injectables/LocalAuthGuard.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/auth/guard/naver',
        {
          _index: 462,
          title: {},
          body: { 'injectables/NaverAuthGuard.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/auth/guard/token.guard.ts',
        {
          _index: 565,
          title: {},
          body: { 'injectables/TokenGuard.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/auth/interface/requestuser.interface.ts',
        {
          _index: 562,
          title: {},
          body: {
            'interfaces/RequestUserInterface.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'src/auth/interface/token.interface.ts',
        {
          _index: 567,
          title: {},
          body: { 'interfaces/TokenInterface.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/auth/strategy/google',
        {
          _index: 402,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'src/auth/strategy/kakao',
        {
          _index: 440,
          title: {},
          body: {
            'injectables/KakaoAuthStrategy.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'src/auth/strategy/local',
        {
          _index: 451,
          title: {},
          body: {
            'injectables/LocalAuthStrategy.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'src/auth/strategy/naver',
        {
          _index: 464,
          title: {},
          body: {
            'injectables/NaverAuthStrategy.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'src/auth/strategy/token.strategy.ts',
        {
          _index: 568,
          title: {},
          body: { 'injectables/TokenStrategy.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/auth/strategy/token.strategy.ts:21',
        {
          _index: 572,
          title: {},
          body: { 'injectables/TokenStrategy.html': {} },
        },
      ],
      [
        'src/auth/strategy/token.strategy.ts:9',
        {
          _index: 570,
          title: {},
          body: { 'injectables/TokenStrategy.html': {} },
        },
      ],
      [
        'src/db/db.module.ts',
        {
          _index: 354,
          title: {},
          body: { 'modules/DbModule.html': {} },
        },
      ],
      [
        'src/email/email.module.ts',
        {
          _index: 378,
          title: {},
          body: { 'modules/EmailModule.html': {} },
        },
      ],
      [
        'src/email/email.service.ts',
        {
          _index: 379,
          title: {},
          body: { 'injectables/EmailService.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/email/email.service.ts:21',
        {
          _index: 385,
          title: {},
          body: { 'injectables/EmailService.html': {} },
        },
      ],
      [
        'src/email/email.service.ts:8',
        {
          _index: 382,
          title: {},
          body: { 'injectables/EmailService.html': {} },
        },
      ],
      [
        'src/main.ts',
        {
          _index: 661,
          title: {},
          body: { 'coverage.html': {}, 'miscellaneous/functions.html': {} },
        },
      ],
      [
        'src/product/dto/create',
        {
          _index: 322,
          title: {},
          body: { 'classes/CreateProductDto.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/product/dto/update',
        {
          _index: 589,
          title: {},
          body: { 'classes/UpdateProductDto.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/product/entities/base.entity.ts',
        {
          _index: 300,
          title: {},
          body: { 'classes/BaseEntity.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/product/entities/base.entity.ts:10',
        {
          _index: 312,
          title: {},
          body: { 'classes/BaseEntity.html': {} },
        },
      ],
      [
        'src/product/entities/base.entity.ts:13',
        {
          _index: 308,
          title: {},
          body: { 'classes/BaseEntity.html': {} },
        },
      ],
      [
        'src/product/entities/base.entity.ts:16',
        {
          _index: 314,
          title: {},
          body: { 'classes/BaseEntity.html': {} },
        },
      ],
      [
        'src/product/entities/base.entity.ts:19',
        {
          _index: 310,
          title: {},
          body: { 'classes/BaseEntity.html': {} },
        },
      ],
      [
        'src/product/entities/product.entity.ts',
        {
          _index: 474,
          title: {},
          body: { 'entities/Product.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/product/entities/product.entity.ts:10',
        {
          _index: 480,
          title: {},
          body: { 'entities/Product.html': {} },
        },
      ],
      [
        'src/product/entities/product.entity.ts:13',
        {
          _index: 477,
          title: {},
          body: { 'entities/Product.html': {} },
        },
      ],
      [
        'src/product/entities/product.entity.ts:16',
        {
          _index: 476,
          title: {},
          body: { 'entities/Product.html': {} },
        },
      ],
      [
        'src/product/entities/product.entity.ts:19',
        {
          _index: 481,
          title: {},
          body: { 'entities/Product.html': {} },
        },
      ],
      [
        'src/product/entities/product.entity.ts:7',
        {
          _index: 479,
          title: {},
          body: { 'entities/Product.html': {} },
        },
      ],
      [
        'src/product/product.controller.ts',
        {
          _index: 485,
          title: {},
          body: {
            'controllers/ProductController.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'src/product/product.controller.ts:22',
        {
          _index: 496,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      [
        'src/product/product.controller.ts:28',
        {
          _index: 499,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      [
        'src/product/product.controller.ts:35',
        {
          _index: 491,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      [
        'src/product/product.controller.ts:41',
        {
          _index: 494,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      [
        'src/product/product.controller.ts:48',
        {
          _index: 504,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      [
        'src/product/product.module.ts',
        {
          _index: 527,
          title: {},
          body: { 'modules/ProductModule.html': {} },
        },
      ],
      [
        'src/product/product.service.ts',
        {
          _index: 531,
          title: {},
          body: { 'injectables/ProductService.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/product/product.service.ts:16',
        {
          _index: 537,
          title: {},
          body: { 'injectables/ProductService.html': {} },
        },
      ],
      [
        'src/product/product.service.ts:21',
        {
          _index: 538,
          title: {},
          body: { 'injectables/ProductService.html': {} },
        },
      ],
      [
        'src/product/product.service.ts:32',
        {
          _index: 535,
          title: {},
          body: { 'injectables/ProductService.html': {} },
        },
      ],
      [
        'src/product/product.service.ts:40',
        {
          _index: 536,
          title: {},
          body: { 'injectables/ProductService.html': {} },
        },
      ],
      [
        'src/product/product.service.ts:51',
        {
          _index: 539,
          title: {},
          body: { 'injectables/ProductService.html': {} },
        },
      ],
      [
        'src/product/product.service.ts:9',
        {
          _index: 534,
          title: {},
          body: { 'injectables/ProductService.html': {} },
        },
      ],
      [
        'src/redis/redis.module.ts',
        {
          _index: 549,
          title: {},
          body: { 'modules/RedisModule.html': {} },
        },
      ],
      [
        'src/user/dto/create',
        {
          _index: 340,
          title: {},
          body: { 'classes/CreateUserDto.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/user/dto/login',
        {
          _index: 459,
          title: {},
          body: { 'classes/LoginUserDto.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/user/dto/update',
        {
          _index: 592,
          title: {},
          body: { 'classes/UpdateUserDto.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/user/entities/provider.enum.ts',
        {
          _index: 720,
          title: {},
          body: { 'miscellaneous/enumerations.html': {} },
        },
      ],
      [
        'src/user/entities/user.entity.ts',
        {
          _index: 594,
          title: {},
          body: { 'entities/User.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/user/entities/user.entity.ts:11',
        {
          _index: 607,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      [
        'src/user/entities/user.entity.ts:15',
        {
          _index: 600,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      [
        'src/user/entities/user.entity.ts:18',
        {
          _index: 596,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      [
        'src/user/entities/user.entity.ts:21',
        {
          _index: 601,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      [
        'src/user/entities/user.entity.ts:24',
        {
          _index: 598,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      [
        'src/user/entities/user.entity.ts:27',
        {
          _index: 602,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      [
        'src/user/entities/user.entity.ts:30',
        {
          _index: 606,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      [
        'src/user/user.controller.ts',
        {
          _index: 630,
          title: {},
          body: { 'controllers/UserController.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/user/user.module.ts',
        {
          _index: 635,
          title: {},
          body: { 'modules/UserModule.html': {} },
        },
      ],
      [
        'src/user/user.service.ts',
        {
          _index: 638,
          title: {},
          body: { 'injectables/UserService.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/user/user.service.ts:15',
        {
          _index: 643,
          title: {},
          body: { 'injectables/UserService.html': {} },
        },
      ],
      [
        'src/user/user.service.ts:23',
        {
          _index: 646,
          title: {},
          body: { 'injectables/UserService.html': {} },
        },
      ],
      [
        'src/user/user.service.ts:8',
        {
          _index: 641,
          title: {},
          body: { 'injectables/UserService.html': {} },
        },
      ],
      [
        'starbucks_js',
        {
          _index: 95,
          title: {},
          body: { 'injectables/AppService.html': {} },
        },
      ],
      ['start', { _index: 744, title: {}, body: { 'index.html': {} } }],
      [
        'start:dev',
        {
          _index: 747,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      ['start:prodrun', { _index: 749, title: {}, body: { 'index.html': {} } }],
      [
        'started',
        {
          _index: 724,
          title: { 'index.html': {} },
          body: {},
        },
      ],
      ['starter', { _index: 736, title: {}, body: { 'index.html': {} } }],
      [
        'statements',
        {
          _index: 653,
          title: {},
          body: { 'coverage.html': {} },
        },
      ],
      ['stay', { _index: 791, title: {}, body: { 'index.html': {} } }],
      [
        'store',
        {
          _index: 553,
          title: {},
          body: { 'modules/RedisModule.html': {}, 'dependencies.html': {} },
        },
      ],
      [
        'strategy',
        {
          _index: 405,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'injectables/TokenStrategy.html': {},
          },
        },
      ],
      [
        'string',
        {
          _index: 15,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/BaseEntity.html': {},
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'classes/LoginUserDto.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'entities/Product.html': {},
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
            'interfaces/TokenInterface.html': {},
            'entities/User.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      [
        'subject',
        {
          _index: 287,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'super',
        {
          _index: 418,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'injectables/TokenStrategy.html': {},
          },
        },
      ],
      [
        'support',
        {
          _index: 767,
          title: {},
          body: { 'index.html': {}, 'modules.html': {} },
        },
      ],
      ['svg', { _index: 824, title: {}, body: { 'modules.html': {} } }],
      [
        'synchronize',
        {
          _index: 374,
          title: {},
          body: { 'modules/DbModule.html': {} },
        },
      ],
      [
        'table',
        {
          _index: 667,
          title: {},
          body: { 'coverage.html': {} },
        },
      ],
      [
        "tablesort(document.getelementbyid('coverage",
        {
          _index: 666,
          title: {},
          body: { 'coverage.html': {} },
        },
      ],
      ['test', { _index: 752, title: {}, body: { 'index.html': {} } }],
      [
        'test:covresources',
        {
          _index: 755,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      ['test:e2e', { _index: 754, title: {}, body: { 'index.html': {} } }],
      [
        'tests',
        {
          _index: 750,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      [
        'text',
        {
          _index: 288,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'thanks',
        {
          _index: 806,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      [
        'this.appservice.gethello',
        {
          _index: 25,
          title: {},
          body: { 'controllers/AppController.html': {} },
        },
      ],
      [
        'this.authservice.create(dto',
        {
          _index: 183,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'this.authservice.generatetoken(user.id',
        {
          _index: 190,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'this.authservice.login',
        {
          _index: 458,
          title: {},
          body: { 'injectables/LocalAuthStrategy.html': {} },
        },
      ],
      [
        'this.authservice.sendemailotp(email',
        {
          _index: 207,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'this.authservice.signupmail(user.email',
        {
          _index: 184,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'this.cachemanager.set(email',
        {
          _index: 298,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        "this.configservice.get('token_expiration_time",
        {
          _index: 295,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        "this.configservice.get('token_secret",
        {
          _index: 293,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'this.emailservice.sendmail',
        {
          _index: 286,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'this.generateotp',
        {
          _index: 297,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'this.jwtservice.sign(load',
        {
          _index: 291,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'this.mail',
        {
          _index: 390,
          title: {},
          body: { 'injectables/EmailService.html': {} },
        },
      ],
      [
        'this.mail.sendmail(options',
        {
          _index: 395,
          title: {},
          body: { 'injectables/EmailService.html': {} },
        },
      ],
      [
        'this.password',
        {
          _index: 617,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      [
        'this.productservice.create(dto',
        {
          _index: 519,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      [
        'this.productservice.delete(id',
        {
          _index: 521,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      [
        'this.productservice.getall',
        {
          _index: 514,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      [
        'this.productservice.getproductbyid(productid',
        {
          _index: 516,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      [
        'this.productservice.update(id',
        {
          _index: 524,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      [
        'this.provider',
        {
          _index: 614,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      [
        'this.repository.create(dto',
        {
          _index: 545,
          title: {},
          body: {
            'injectables/ProductService.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      [
        'this.repository.delete(id',
        {
          _index: 547,
          title: {},
          body: { 'injectables/ProductService.html': {} },
        },
      ],
      [
        'this.repository.find',
        {
          _index: 543,
          title: {},
          body: { 'injectables/ProductService.html': {} },
        },
      ],
      [
        'this.repository.findoneby',
        {
          _index: 544,
          title: {},
          body: {
            'injectables/ProductService.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      [
        'this.repository.save(product',
        {
          _index: 546,
          title: {},
          body: { 'injectables/ProductService.html': {} },
        },
      ],
      [
        'this.repository.save(user',
        {
          _index: 649,
          title: {},
          body: { 'injectables/UserService.html': {} },
        },
      ],
      [
        'this.repository.update(id',
        {
          _index: 548,
          title: {},
          body: { 'injectables/ProductService.html': {} },
        },
      ],
      [
        'this.userservice.createuser',
        {
          _index: 270,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
          },
        },
      ],
      [
        "this.userservice.getuserby('email",
        {
          _index: 276,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
          },
        },
      ],
      [
        "this.userservice.getuserby('id",
        {
          _index: 579,
          title: {},
          body: { 'injectables/TokenStrategy.html': {} },
        },
      ],
      [
        'throw',
        {
          _index: 278,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'injectables/ProductService.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      ['time', { _index: 783, title: {}, body: { 'index.html': {} } }],
      [
        'token',
        {
          _index: 189,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'token_expiration_time',
        {
          _index: 76,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'token_secret',
        {
          _index: 75,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'tokenguard',
        {
          _index: 163,
          title: { 'injectables/TokenGuard.html': {} },
          body: {
            'controllers/AuthController.html': {},
            'injectables/TokenGuard.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'tokeninterface',
        {
          _index: 261,
          title: { 'interfaces/TokenInterface.html': {} },
          body: {
            'injectables/AuthService.html': {},
            'interfaces/TokenInterface.html': {},
            'injectables/TokenStrategy.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'tokenstrategy',
        {
          _index: 215,
          title: { 'injectables/TokenStrategy.html': {} },
          body: {
            'modules/AuthModule.html': {},
            'injectables/TokenStrategy.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      ['touch', { _index: 814, title: {}, body: { 'index.html': {} } }],
      [
        'transformer',
        {
          _index: 611,
          title: {},
          body: { 'entities/User.html': {}, 'dependencies.html': {} },
        },
      ],
      [
        'true',
        {
          _index: 373,
          title: {},
          body: {
            'modules/DbModule.html': {},
            'entities/Product.html': {},
            'modules/RedisModule.html': {},
            'entities/User.html': {},
          },
        },
      ],
      [
        'true})@exclude',
        {
          _index: 599,
          title: {},
          body: { 'entities/User.html': {} },
        },
      ],
      [
        'try',
        {
          _index: 428,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'entities/User.html': {},
          },
        },
      ],
      [
        'ttl',
        {
          _index: 557,
          title: {},
          body: { 'modules/RedisModule.html': {} },
        },
      ],
      ['twitter', { _index: 820, title: {}, body: { 'index.html': {} } }],
      [
        'type',
        {
          _index: 119,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/BaseEntity.html': {},
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
            'modules/DbModule.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'classes/LoginUserDto.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'entities/Product.html': {},
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
            'interfaces/RequestUserInterface.html': {},
            'interfaces/TokenInterface.html': {},
            'injectables/TokenStrategy.html': {},
            'entities/User.html': {},
            'injectables/UserService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'typeorm',
        {
          _index: 316,
          title: {},
          body: {
            'classes/BaseEntity.html': {},
            'entities/Product.html': {},
            'injectables/ProductService.html': {},
            'entities/User.html': {},
            'injectables/UserService.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'typeormmodule',
        {
          _index: 355,
          title: {},
          body: {
            'modules/DbModule.html': {},
            'modules/ProductModule.html': {},
            'modules/UserModule.html': {},
          },
        },
      ],
      [
        'typeormmodule.forfeature([product',
        {
          _index: 530,
          title: {},
          body: { 'modules/ProductModule.html': {} },
        },
      ],
      [
        'typeormmodule.forfeature([user',
        {
          _index: 637,
          title: {},
          body: { 'modules/UserModule.html': {} },
        },
      ],
      [
        'typeormmodule.forrootasync',
        {
          _index: 357,
          title: {},
          body: { 'modules/DbModule.html': {} },
        },
      ],
      [
        'types',
        {
          _index: 586,
          title: {},
          body: {
            'classes/UpdateAuthDto.html': {},
            'classes/UpdateProductDto.html': {},
            'classes/UpdateUserDto.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'types/bcryptjs',
        {
          _index: 681,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      [
        'types/cookie',
        {
          _index: 683,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      [
        'types/gravatar',
        {
          _index: 686,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      [
        'types/hapi__joi',
        {
          _index: 688,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      [
        'types/nodemailer',
        {
          _index: 690,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      [
        'types/passport',
        {
          _index: 692,
          title: {},
          body: { 'dependencies.html': {} },
        },
      ],
      ['typescript', { _index: 735, title: {}, body: { 'index.html': {} } }],
      [
        'undefined',
        {
          _index: 273,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'entities/User.html': {},
          },
        },
      ],
      [
        'unique',
        {
          _index: 483,
          title: {},
          body: { 'entities/Product.html': {}, 'entities/User.html': {} },
        },
      ],
      ['unit', { _index: 751, title: {}, body: { 'index.html': {} } }],
      [
        'unknown',
        {
          _index: 122,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
            'injectables/TokenStrategy.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      [
        'unlicensed',
        { _index: 834, title: {}, body: { 'properties.html': {} } },
      ],
      [
        'update',
        {
          _index: 489,
          title: {},
          body: {
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
          },
        },
      ],
      [
        "update(@param('id",
        {
          _index: 523,
          title: {},
          body: { 'controllers/ProductController.html': {} },
        },
      ],
      [
        'update(id',
        {
          _index: 501,
          title: {},
          body: {
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
          },
        },
      ],
      [
        'updateauthdto',
        {
          _index: 581,
          title: { 'classes/UpdateAuthDto.html': {} },
          body: { 'classes/UpdateAuthDto.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'updatedat',
        {
          _index: 305,
          title: {},
          body: { 'classes/BaseEntity.html': {} },
        },
      ],
      [
        'updatedatecolumn',
        {
          _index: 313,
          title: {},
          body: { 'classes/BaseEntity.html': {} },
        },
      ],
      [
        'updateproductdto',
        {
          _index: 502,
          title: { 'classes/UpdateProductDto.html': {} },
          body: {
            'controllers/ProductController.html': {},
            'injectables/ProductService.html': {},
            'classes/UpdateProductDto.html': {},
            'coverage.html': {},
          },
        },
      ],
      ['updates', { _index: 793, title: {}, body: { 'index.html': {} } }],
      [
        'updateuserdto',
        {
          _index: 591,
          title: { 'classes/UpdateUserDto.html': {} },
          body: { 'classes/UpdateUserDto.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'usefactory',
        {
          _index: 358,
          title: {},
          body: { 'modules/DbModule.html': {}, 'modules/RedisModule.html': {} },
        },
      ],
      [
        'useguards',
        {
          _index: 154,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'useguards(googleauthguard',
        {
          _index: 194,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'useguards(kakaoauthguard',
        {
          _index: 199,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'useguards(localauthguard',
        {
          _index: 186,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'useguards(naverauthguard',
        {
          _index: 203,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'useguards(tokenguard',
        {
          _index: 191,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'user',
        {
          _index: 181,
          title: { 'entities/User.html': {} },
          body: {
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'injectables/EmailService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'interfaces/RequestUserInterface.html': {},
            'entities/User.html': {},
            'controllers/UserController.html': {},
            'modules/UserModule.html': {},
            'injectables/UserService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'user.dto',
        {
          _index: 156,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/UpdateUserDto.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      [
        'user.dto.ts',
        {
          _index: 341,
          title: {},
          body: {
            'classes/CreateUserDto.html': {},
            'classes/LoginUserDto.html': {},
            'classes/UpdateUserDto.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'user.dto.ts:11',
        {
          _index: 461,
          title: {},
          body: { 'classes/LoginUserDto.html': {} },
        },
      ],
      [
        'user.dto.ts:12',
        {
          _index: 348,
          title: {},
          body: { 'classes/CreateUserDto.html': {} },
        },
      ],
      [
        'user.dto.ts:16',
        {
          _index: 347,
          title: {},
          body: { 'classes/CreateUserDto.html': {} },
        },
      ],
      [
        'user.dto.ts:20',
        {
          _index: 349,
          title: {},
          body: { 'classes/CreateUserDto.html': {} },
        },
      ],
      [
        'user.dto.ts:23',
        {
          _index: 351,
          title: {},
          body: { 'classes/CreateUserDto.html': {} },
        },
      ],
      [
        'user.dto.ts:26',
        {
          _index: 350,
          title: {},
          body: { 'classes/CreateUserDto.html': {} },
        },
      ],
      [
        'user.dto.ts:7',
        {
          _index: 460,
          title: {},
          body: { 'classes/LoginUserDto.html': {} },
        },
      ],
      [
        'user.dto.ts:8',
        {
          _index: 352,
          title: {},
          body: { 'classes/CreateUserDto.html': {} },
        },
      ],
      [
        'user.password',
        {
          _index: 272,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'user.provider',
        {
          _index: 429,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
          },
        },
      ],
      [
        'user/dto/create',
        {
          _index: 155,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/UpdateUserDto.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      [
        'user/dto/login',
        {
          _index: 168,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
          },
        },
      ],
      [
        'user/entities/provider.enum',
        {
          _index: 264,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'classes/CreateUserDto.html': {},
            'injectables/GoogleAuthGuard.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthGuard.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthGuard.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'injectables/NaverAuthGuard.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'entities/User.html': {},
          },
        },
      ],
      [
        'user/entities/user.entity',
        {
          _index: 564,
          title: {},
          body: {
            'interfaces/RequestUserInterface.html': {},
            'modules/UserModule.html': {},
            'injectables/UserService.html': {},
          },
        },
      ],
      [
        'user/user.controller',
        {
          _index: 636,
          title: {},
          body: { 'modules/UserModule.html': {} },
        },
      ],
      [
        'user/user.module',
        {
          _index: 57,
          title: {},
          body: { 'modules/AppModule.html': {}, 'modules/AuthModule.html': {} },
        },
      ],
      [
        'user/user.service',
        {
          _index: 259,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'injectables/TokenStrategy.html': {},
            'controllers/UserController.html': {},
            'modules/UserModule.html': {},
          },
        },
      ],
      [
        'usercontroller',
        {
          _index: 629,
          title: { 'controllers/UserController.html': {} },
          body: {
            'controllers/UserController.html': {},
            'modules/UserModule.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'userid',
        {
          _index: 248,
          title: {},
          body: {
            'injectables/AuthService.html': {},
            'interfaces/TokenInterface.html': {},
          },
        },
      ],
      [
        'usermodule',
        {
          _index: 45,
          title: { 'modules/UserModule.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/UserModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'username',
        {
          _index: 345,
          title: {},
          body: {
            'classes/CreateUserDto.html': {},
            'modules/DbModule.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'entities/User.html': {},
          },
        },
      ],
      [
        'usernamefield',
        {
          _index: 457,
          title: {},
          body: { 'injectables/LocalAuthStrategy.html': {} },
        },
      ],
      [
        'userservice',
        {
          _index: 237,
          title: { 'injectables/UserService.html': {} },
          body: {
            'injectables/AuthService.html': {},
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'injectables/TokenStrategy.html': {},
            'controllers/UserController.html': {},
            'modules/UserModule.html': {},
            'injectables/UserService.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      ['using', { _index: 784, title: {}, body: { 'index.html': {} } }],
      [
        'validate',
        {
          _index: 407,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/LocalAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
            'injectables/TokenStrategy.html': {},
          },
        },
      ],
      [
        'validate(accesstoken',
        {
          _index: 409,
          title: {},
          body: {
            'injectables/GoogleAuthStrategy.html': {},
            'injectables/KakaoAuthStrategy.html': {},
            'injectables/NaverAuthStrategy.html': {},
          },
        },
      ],
      [
        'validate(email',
        {
          _index: 454,
          title: {},
          body: { 'injectables/LocalAuthStrategy.html': {} },
        },
      ],
      [
        'validate(load',
        {
          _index: 571,
          title: {},
          body: { 'injectables/TokenStrategy.html': {} },
        },
      ],
      [
        'validation',
        {
          _index: 274,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'validationschema',
        {
          _index: 63,
          title: {},
          body: { 'modules/AppModule.html': {} },
        },
      ],
      [
        'validator',
        {
          _index: 339,
          title: {},
          body: {
            'classes/CreateProductDto.html': {},
            'classes/CreateUserDto.html': {},
            'classes/LoginUserDto.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'value',
        {
          _index: 645,
          title: {},
          body: {
            'injectables/UserService.html': {},
            'miscellaneous/enumerations.html': {},
          },
        },
      ],
      [
        'verifycallback',
        {
          _index: 413,
          title: {},
          body: { 'injectables/GoogleAuthStrategy.html': {} },
        },
      ],
      ['version', { _index: 832, title: {}, body: { 'properties.html': {} } }],
      [
        'video',
        {
          _index: 776,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      ['visit', { _index: 763, title: {}, body: { 'index.html': {} } }],
      [
        'visualize',
        {
          _index: 778,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      ['watch', { _index: 745, title: {}, body: { 'index.html': {} } }],
      [
        'website',
        {
          _index: 818,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      ['working', { _index: 761, title: {}, body: { 'index.html': {} } }],
      [
        'x',
        {
          _index: 795,
          title: {},
          body: { 'index.html': {} },
        },
      ],
      ["you'd", { _index: 810, title: {}, body: { 'index.html': {} } }],
      [
        'zoom',
        {
          _index: 46,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/EmailModule.html': {},
            'modules/ProductModule.html': {},
            'modules/UserModule.html': {},
            'overview.html': {},
          },
        },
      ],
    ],
    pipeline: ['stemmer'],
  },
  store: {
    'controllers/AppController.html': {
      url: 'controllers/AppController.html',
      title: 'controller - AppController',
      body: '\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \'@nestjs/common\';\nimport { AppService } from \'@root/app.service\';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'modules/AppModule.html': {
      url: 'modules/AppModule.html',
      title: 'module - AppModule',
      body: "\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDbModule\n\nDbModule\n\nAppModule -->\n\nDbModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DbModule\n                        \n                        \n                            EmailModule\n                        \n                        \n                            ProductModule\n                        \n                        \n                            RedisModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport * as Joi from '@hapi/joi';\nimport { ProductModule } from '@product/product.module';\nimport { DbModule } from '@db/db.module';\nimport { UserModule } from '@user/user.module';\nimport { AuthModule } from '@auth/auth.module';\nimport { EmailModule } from '@email/email.module';\nimport { AppController } from '@root/app.controller';\nimport { AppService } from '@root/app.service';\nimport { RedisModule } from './redis/redis.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        POSTGRES_HOST: Joi.string().required(),\n        POSTGRES_USER: Joi.string().required(),\n        POSTGRES_PASSWORD: Joi.string().required(),\n        POSTGRES_PORT: Joi.number().required(),\n        POSTGRES_DB: Joi.string().required(),\n        EMAIL_SERVICE: Joi.string().required(),\n        EMAIL_USER: Joi.string().required(),\n        EMAIL_PASSWORD: Joi.string().required(),\n        TOKEN_SECRET: Joi.string().required(),\n        TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        GOOGLE_CLIENT_ID: Joi.string().required(),\n        GOOGLE_CLIENT_SECRET: Joi.string().required(),\n        GOOGLE_CALLBACK_URL: Joi.string().required(),\n        KAKAO_CLIENT_ID: Joi.string().required(),\n        KAKAO_CALLBACK_URL: Joi.string().required(),\n        NAVER_CLIENT_ID: Joi.string().required(),\n        NAVER_CLIENT_SECRET: Joi.string().required(),\n        NAVER_CALLBACK_URL: Joi.string().required(),\n        REDIS_HOST: Joi.string().required(),\n        REDIS_PORT: Joi.number().required(),\n        REDIS_TTL: Joi.number().required(),\n      }),\n      envFilePath: '.env', // 환경 변수 파일 경로 명시\n    }),\n    ProductModule,\n    DbModule,\n    UserModule,\n    AuthModule,\n    EmailModule,\n    RedisModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/AppService.html': {
      url: 'injectables/AppService.html',
      title: 'injectable - AppService',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \'@nestjs/common\';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return \'Hello starbucks_js!\';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/Auth.html': {
      url: 'classes/Auth.html',
      title: 'class - Auth',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/auth.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Auth {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'controllers/AuthController.html': {
      url: 'controllers/AuthController.html',
      title: 'controller - AuthController',
      body: "\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                authenticate\n                            \n                            \n                                    \n                                    Async\n                                emailOTP\n                            \n                            \n                                    \n                                    \n                                    Async\n                                googleLogin\n                            \n                            \n                                    \n                                    \n                                    Async\n                                googleLoginCallback\n                            \n                            \n                                    \n                                    \n                                    Async\n                                kakaoLogin\n                            \n                            \n                                    \n                                    \n                                    Async\n                                kakaoLoginCallback\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    Async\n                                naverLogin\n                            \n                            \n                                    \n                                    \n                                    Async\n                                naverLoginCallback\n                            \n                            \n                                    \n                                    \n                                    Async\n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(req: RequestUserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(TokenGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        emailOTP\n                        \n                    \n                \n            \n            \n                \n                        \n                    emailOTP(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/email/send')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        googleLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/google')@UseGuards(GoogleAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        googleLoginCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleLoginCallback(req: RequestUserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/google/callback')@UseGuards(GoogleAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        kakaoLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    kakaoLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/kakao')@UseGuards(KakaoAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        kakaoLoginCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    kakaoLoginCallback(req: RequestUserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/kakao/callback')@UseGuards(KakaoAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(req: RequestUserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')@UseGuards(LocalAuthGuard)@ApiBody({type: LoginUserDto})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        naverLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    naverLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/naver')@UseGuards(NaverAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:91\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        naverLoginCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    naverLoginCallback(req: RequestUserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/naver/callback')@UseGuards(NaverAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                        \n                    signup(dto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signup')@ApiBody({type: CreateUserDto})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpStatus,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { CreateUserDto } from '@user/dto/create-user.dto';\nimport { AuthService } from '@auth/auth.service';\nimport { RequestUserInterface } from '@auth/interface/requestUser.interface';\nimport { LocalAuthGuard } from '@auth/guard/local-auth.guard';\nimport { TokenGuard } from '@auth/guard/token.guard';\nimport { ApiBody, ApiTags } from '@nestjs/swagger';\nimport { LoginUserDto } from '@user/dto/login-user.dto';\nimport { GoogleAuthGuard } from '@auth/guard/google-auth.guard';\nimport { KakaoAuthGuard } from '@auth/guard/kakao-auth.guard';\nimport { NaverAuthGuard } from '@auth/guard/naver-auth.guard';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  // 회원가입 API\n  @Post('/signup')\n  @ApiBody({ type: CreateUserDto })\n  async signup(@Body() dto: CreateUserDto) {\n    const user = await this.authService.create(dto);\n    await this.authService.signupMail(user.email);\n\n    return user;\n  }\n\n  // 로그인 API\n  @Post('/login')\n  @UseGuards(LocalAuthGuard)\n  @ApiBody({ type: LoginUserDto })\n  async login(@Req() req: RequestUserInterface) {\n    const user = req.user;\n    const token = this.authService.generateToken(user.id);\n\n    return { user, token };\n  }\n\n  // 로그인 이후 토큰 기반으로 정보 조회 API\n  @Get()\n  @UseGuards(TokenGuard)\n  async authenticate(@Req() req: RequestUserInterface) {\n    return req.user;\n  }\n\n  // 구글 로그인 API\n  @Get('/google')\n  @UseGuards(GoogleAuthGuard)\n  async googleLogin() {\n    return HttpStatus.OK;\n  }\n\n  // 구글 로그인 콜백 API\n  @Get('/google/callback')\n  @UseGuards(GoogleAuthGuard)\n  async googleLoginCallback(@Req() req: RequestUserInterface) {\n    const user = req.user;\n    const token = this.authService.generateToken(user.id);\n\n    return { user, token };\n  }\n\n  // 카카오 로그인 API\n  @Get('/kakao')\n  @UseGuards(KakaoAuthGuard)\n  async kakaoLogin() {\n    return HttpStatus.OK;\n  }\n\n  // 카카오 로그인 콜백 API\n  @Get('/kakao/callback')\n  @UseGuards(KakaoAuthGuard)\n  async kakaoLoginCallback(@Req() req: RequestUserInterface) {\n    const user = req.user;\n    const token = this.authService.generateToken(user.id);\n\n    return { user, token };\n  }\n\n  // 네이버 로그인 API\n  @Get('/naver')\n  @UseGuards(NaverAuthGuard)\n  async naverLogin() {\n    return HttpStatus.OK;\n  }\n\n  // 네이버 로그인 콜백 API\n  @Get('/naver/callback')\n  @UseGuards(NaverAuthGuard)\n  async naverLoginCallback(@Req() req: RequestUserInterface) {\n    const user = req.user;\n    const token = this.authService.generateToken(user.id);\n\n    return { user, token };\n  }\n\n  // 이메일로 인증번호 발송 API\n  @Post('/email/send')\n  async emailOTP(@Body('email') email: string) {\n    return await this.authService.sendEmailOTP(email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'modules/AuthModule.html': {
      url: 'modules/AuthModule.html',
      title: 'module - AuthModule',
      body: "\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nEmailModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleAuthStrategy\n\nGoogleAuthStrategy\n\nAuthModule -->\n\nGoogleAuthStrategy->AuthModule\n\n\n\n\n\nKakaoAuthStrategy\n\nKakaoAuthStrategy\n\nAuthModule -->\n\nKakaoAuthStrategy->AuthModule\n\n\n\n\n\nLocalAuthStrategy\n\nLocalAuthStrategy\n\nAuthModule -->\n\nLocalAuthStrategy->AuthModule\n\n\n\n\n\nNaverAuthStrategy\n\nNaverAuthStrategy\n\nAuthModule -->\n\nNaverAuthStrategy->AuthModule\n\n\n\n\n\nTokenStrategy\n\nTokenStrategy\n\nAuthModule -->\n\nTokenStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GoogleAuthStrategy\n                        \n                        \n                            KakaoAuthStrategy\n                        \n                        \n                            LocalAuthStrategy\n                        \n                        \n                            NaverAuthStrategy\n                        \n                        \n                            TokenStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserModule } from '@user/user.module';\nimport { AuthController } from '@auth/auth.controller';\nimport { AuthService } from '@auth/auth.service';\nimport { EmailModule } from '@email/email.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { LocalAuthStrategy } from '@auth/strategy/local-auth.strategy';\nimport { TokenStrategy } from '@auth/strategy/token.strategy';\nimport { GoogleAuthStrategy } from '@auth/strategy/google-auth.strategy';\nimport { KakaoAuthStrategy } from '@auth/strategy/kakao-auth.strategy';\nimport { NaverAuthStrategy } from '@auth/strategy/naver-auth.strategy';\n\n@Module({\n  imports: [ConfigModule, UserModule, EmailModule, JwtModule.register({})],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    LocalAuthStrategy,\n    TokenStrategy,\n    GoogleAuthStrategy,\n    KakaoAuthStrategy,\n    NaverAuthStrategy,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/AuthService.html': {
      url: 'injectables/AuthService.html',
      title: 'injectable - AuthService',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                generateOTP\n                            \n                            \n                                    Public\n                                generateToken\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                sendEmailOTP\n                            \n                            \n                                    Async\n                                signupMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UserService, emailService: EmailService, jwtService: JwtService, cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateOTP\n                        \n                    \n                \n            \n            \n                \ngenerateOTP()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(dto: LoginUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            LoginUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendEmailOTP\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendEmailOTP(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signupMail\n                        \n                    \n                \n            \n            \n                \n                        \n                    signupMail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Inject, Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcryptjs';\nimport { UserService } from '@user/user.service';\nimport { EmailService } from '@email/email.service';\nimport { CreateUserDto } from '@user/dto/create-user.dto';\nimport { LoginUserDto } from '@user/dto/login-user.dto';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { TokenInterface } from '@auth/interface/token.interface';\nimport { Provider } from '@user/entities/provider.enum';\nimport { CACHE_MANAGER } from '@nestjs/common/cache';\nimport { Cache } from 'cache-manager';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UserService,\n    private readonly emailService: EmailService,\n    private readonly jwtService: JwtService,\n    @Inject(CACHE_MANAGER) private cacheManager: Cache,\n  ) {}\n\n  // 회원가입 로직\n  async create(dto: CreateUserDto) {\n    return await this.userService.createUser({\n      ...dto,\n      provider: Provider.LOCAL,\n    });\n    // user.password = undefined; // 비밀번호 숨김 -> validation 기능으로 뺌\n  }\n\n  // 로그인 로직\n  async login(dto: LoginUserDto) {\n    // 1. 이메일 체크\n    const user = await this.userService.getUserBy('email', dto.email);\n\n    if (!user) {\n      throw new HttpException(\n        '해당 이메일을 가진 사용자가 없습니다.',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    // 2. 비밀번호 매칭\n    const pass = await bcrypt.compare(dto.password, user.password);\n\n    if (!pass) {\n      throw new HttpException(\n        '비밀번호가 일치하지 않습니다.',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n    // 3. return user\n    return user;\n  }\n\n  // 회원가입 후 이메일로 메세지 보내는 로직\n  async signupMail(email: string) {\n    return await this.emailService.sendMail({\n      to: email,\n      subject: '안녕하세요. 스타벅스 장센점 입니다.',\n      text: '회원가입이 정상적으로 되었습니다. 감사합니다.',\n    });\n  }\n\n  // AccessToken 발행 로직\n  public generateToken(userId: string) {\n    const load: TokenInterface = { userId };\n\n    return this.jwtService.sign(load, {\n      secret: this.configService.get('TOKEN_SECRET'),\n      expiresIn: this.configService.get('TOKEN_EXPIRATION_TIME'),\n    });\n  }\n\n  // 이메일 인증 로직\n  async sendEmailOTP(email: string) {\n    const otp = this.generateOTP();\n\n    // 캐시에 저장\n    await this.cacheManager.set(email, otp);\n\n    return await this.emailService.sendMail({\n      to: email,\n      subject: '회원님이 요청하신 인증 번호 입니다.',\n      text: `인증번호는 ${otp} 입니다. 감사합니다.`,\n    });\n  }\n\n  // 랜덤 번호 로직\n  generateOTP() {\n    let otp = '';\n\n    for (let i = 1; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'classes/BaseEntity.html': {
      url: 'classes/BaseEntity.html',
      title: 'class - BaseEntity',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/entities/base.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createdAt\n                            \n                            \n                                    \n                                    Public\n                                deletedAt\n                            \n                            \n                                    \n                                    Public\n                                id\n                            \n                            \n                                    \n                                    Public\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/base.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/base.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/base.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/base.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CreateDateColumn,\n  DeleteDateColumn,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport abstract class BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  public id: string;\n\n  @CreateDateColumn()\n  public createdAt: Date;\n\n  @UpdateDateColumn()\n  public updatedAt: Date;\n\n  @DeleteDateColumn()\n  public deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'classes/CreateAuthDto.html': {
      url: 'classes/CreateAuthDto.html',
      title: 'class - CreateAuthDto',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-auth.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateAuthDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/CreateProductDto.html': {
      url: 'classes/CreateProductDto.html',
      title: 'class - CreateProductDto',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/dto/create-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                productImg\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        productImg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \'@nestjs/swagger\';\nimport { IsNumber, IsString } from \'class-validator\';\n\nexport class CreateProductDto {\n  @ApiProperty()\n  @IsString()\n  name: string;\n\n  @ApiProperty()\n  @IsNumber()\n  price: number;\n\n  @ApiProperty()\n  @IsString()\n  description: string;\n\n  @ApiProperty()\n  @IsString()\n  category: string;\n\n  @ApiProperty()\n  @IsString()\n  productImg: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/CreateUserDto.html': {
      url: 'classes/CreateUserDto.html',
      title: 'class - CreateUserDto',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    Optional\n                                profileImg\n                            \n                            \n                                    \n                                    Optional\n                                provider\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        profileImg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Provider\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNumber, IsString } from 'class-validator';\nimport { Provider } from '@user/entities/provider.enum';\n\nexport class CreateUserDto {\n  @ApiProperty()\n  @IsString()\n  username: string;\n\n  @ApiProperty()\n  @IsString()\n  password?: string;\n\n  @ApiProperty()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @IsNumber()\n  phone?: number;\n\n  @IsString()\n  provider?: Provider;\n\n  @IsString()\n  profileImg?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'modules/DbModule.html': {
      url: 'modules/DbModule.html',
      title: 'module - DbModule',
      body: "\n                   \n\n\n\n\n    Modules\n    DbModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/db/db.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (c: ConfigService) => ({\n        type: 'postgres',\n        host: c.get('POSTGRES_HOST'),\n        username: c.get('POSTGRES_USER'),\n        password: c.get('POSTGRES_PASSWORD'),\n        port: c.get('POSTGRES_PORT'),\n        database: c.get('POSTGRES_DB'),\n        entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n        autoLoadEntities: true,\n        synchronize: true,\n      }),\n    }),\n  ],\n})\nexport class DbModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'modules/EmailModule.html': {
      url: 'modules/EmailModule.html',
      title: 'module - EmailModule',
      body: "\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { EmailService } from '@email/email.service';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [EmailService],\n  exports: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/EmailService.html': {
      url: 'injectables/EmailService.html',
      title: 'injectable - EmailService',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                mail\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/email/email.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMail\n                        \n                    \n                \n            \n            \n                \nsendMail(options: Mail.Options)\n                \n            \n\n\n                    \n                        \n                            Defined in src/email/email.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        Mail.Options\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mail\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Mail\n\n                    \n                \n                    \n                        \n                                Defined in src/email/email.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { createTransport } from 'nodemailer';\nimport { ConfigService } from '@nestjs/config';\nimport Mail from 'nodemailer/lib/mailer';\n\n@Injectable()\nexport class EmailService {\n  private mail: Mail;\n\n  constructor(private readonly configService: ConfigService) {\n    this.mail = createTransport({\n      service: configService.get('EMAIL_SERVICE'),\n      auth: {\n        user: configService.get('EMAIL_USER'),\n        pass: configService.get('EMAIL_PASSWORD'),\n      },\n    });\n  }\n\n  // 메일 보내는 로직\n  sendMail(options: Mail.Options) {\n    return this.mail.sendMail(options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/GoogleAuthGuard.html': {
      url: 'injectables/GoogleAuthGuard.html',
      title: 'injectable - GoogleAuthGuard',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/google-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(Provider.GOOGLE)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Provider } from '@user/entities/provider.enum';\n\n@Injectable()\nexport class GoogleAuthGuard extends AuthGuard(Provider.GOOGLE) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/GoogleAuthStrategy.html': {
      url: 'injectables/GoogleAuthStrategy.html',
      title: 'injectable - GoogleAuthStrategy',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/google-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PassportStrategy(\n  Strategy,\n  Provider.GOOGLE,\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/google-auth.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(accessToken: string, refreshToken: string, profile: any, done: VerifyCallback)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategy/google-auth.strategy.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                        VerifyCallback\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, VerifyCallback } from 'passport-google-oauth2';\nimport { ConfigService } from '@nestjs/config';\nimport { Provider } from '@user/entities/provider.enum';\nimport { UserService } from '@user/user.service';\n\n@Injectable()\nexport class GoogleAuthStrategy extends PassportStrategy(\n  Strategy,\n  Provider.GOOGLE,\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UserService,\n  ) {\n    super({\n      clientID: configService.get('GOOGLE_CLIENT_ID'),\n      clientSecret: configService.get('GOOGLE_CLIENT_SECRET'),\n      callbackURL: configService.get('GOOGLE_CALLBACK_URL'),\n      scope: ['email', 'profile'],\n    });\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n    done: VerifyCallback,\n  ) {\n    // 데이터 가져올 것 정리\n    const { provider, displayName, email, picture } = profile;\n\n    try {\n      // 중복 이메일 체크\n      const user = await this.userService.getUserBy('email', email);\n\n      if (user.provider !== provider) {\n        throw new HttpException(\n          `이미 ${user.provider} 에서 가입되어있습니다.`,\n          HttpStatus.CONFLICT,\n        );\n      }\n\n      console.log('이미 가입 되어있는 회원');\n      done(null, user);\n    } catch (e) {\n      // 없을경우 회원가입\n      if (e.status === 404) {\n        const newUser = await this.userService.createUser({\n          username: displayName,\n          email: email,\n          profileImg: picture,\n          provider: provider,\n        });\n\n        console.log('회원가입 성공');\n        done(null, newUser);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/KakaoAuthGuard.html': {
      url: 'injectables/KakaoAuthGuard.html',
      title: 'injectable - KakaoAuthGuard',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KakaoAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/kakao-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(Provider.KAKAO)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Provider } from '@user/entities/provider.enum';\n\n@Injectable()\nexport class KakaoAuthGuard extends AuthGuard(Provider.KAKAO) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/KakaoAuthStrategy.html': {
      url: 'injectables/KakaoAuthStrategy.html',
      title: 'injectable - KakaoAuthStrategy',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KakaoAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/kakao-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PassportStrategy(\n  Strategy,\n  Provider.KAKAO,\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/kakao-auth.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(accessToken: string, refreshToken: string, profile: any, done: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategy/kakao-auth.strategy.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-kakao';\nimport { Provider } from '@user/entities/provider.enum';\nimport { ConfigService } from '@nestjs/config';\nimport { UserService } from '@user/user.service';\n\n@Injectable()\nexport class KakaoAuthStrategy extends PassportStrategy(\n  Strategy,\n  Provider.KAKAO,\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UserService,\n  ) {\n    super({\n      clientID: configService.get('KAKAO_CLIENT_ID'),\n      callbackURL: configService.get('KAKAO_CALLBACK_URL'),\n    });\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n    done: any,\n  ) {\n    const { provider, username } = profile;\n    const { profile_image } = profile._json.properties;\n    const { email } = profile._json.kakao_account;\n\n    try {\n      const user = await this.userService.getUserBy('email', email);\n\n      if (user.provider !== provider) {\n        throw new HttpException(\n          `이미 ${user.provider}에 연동되어 있는 계정입니다.`,\n          HttpStatus.CONFLICT,\n        );\n      }\n\n      console.log('이미 처리된 계정');\n      done(null, user);\n    } catch (e) {\n      if (e.status === 404) {\n        const newUser = await this.userService.createUser({\n          username: username,\n          email: email,\n          profileImg: profile_image,\n          provider: provider,\n        });\n\n        console.log('회원가입 완료');\n        done(null, newUser);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/LocalAuthGuard.html': {
      url: 'injectables/LocalAuthGuard.html',
      title: 'injectable - LocalAuthGuard',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/local-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(Provider.LOCAL)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Provider } from '@user/entities/provider.enum';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard(Provider.LOCAL) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/LocalAuthStrategy.html': {
      url: 'injectables/LocalAuthStrategy.html',
      title: 'injectable - LocalAuthStrategy',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/local-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PassportStrategy(\n  Strategy,\n  Provider.LOCAL,\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/local-auth.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategy/local-auth.strategy.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { AuthService } from '@auth/auth.service';\nimport { Provider } from '@user/entities/provider.enum';\n\n@Injectable()\nexport class LocalAuthStrategy extends PassportStrategy(\n  Strategy,\n  Provider.LOCAL,\n) {\n  constructor(private readonly authService: AuthService) {\n    super({\n      usernameField: 'email',\n    });\n  }\n\n  // 검증 함수\n  async validate(email: string, password: string) {\n    return await this.authService.login({ email, password });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'classes/LoginUserDto.html': {
      url: 'classes/LoginUserDto.html',
      title: 'class - LoginUserDto',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/login-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/login-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \'@nestjs/swagger\';\nimport { IsEmail, IsString } from \'class-validator\';\n\nexport class LoginUserDto {\n  @ApiProperty()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @IsString()\n  password?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'injectables/NaverAuthGuard.html': {
      url: 'injectables/NaverAuthGuard.html',
      title: 'injectable - NaverAuthGuard',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NaverAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/naver-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(Provider.NAVER)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Provider } from '@user/entities/provider.enum';\n\n@Injectable()\nexport class NaverAuthGuard extends AuthGuard(Provider.NAVER) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/NaverAuthStrategy.html': {
      url: 'injectables/NaverAuthStrategy.html',
      title: 'injectable - NaverAuthStrategy',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NaverAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/naver-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PassportStrategy(\n  Strategy,\n  Provider.NAVER,\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/naver-auth.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(accessToken: string, refreshToken: string, profile: any, done: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategy/naver-auth.strategy.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-naver';\nimport { Provider } from '@user/entities/provider.enum';\nimport { ConfigService } from '@nestjs/config';\nimport { UserService } from '@user/user.service';\n\n@Injectable()\nexport class NaverAuthStrategy extends PassportStrategy(\n  Strategy,\n  Provider.NAVER,\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UserService,\n  ) {\n    super({\n      clientID: configService.get('NAVER_CLIENT_ID'),\n      clientSecret: configService.get('NAVER_CLIENT_SECRET'),\n      callbackURL: configService.get('NAVER_CALLBACK_URL'),\n    });\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n    done: any,\n  ) {\n    const { provider, displayName } = profile;\n    const { email, profile_image } = profile._json;\n\n    try {\n      const user = await this.userService.getUserBy('email', email);\n\n      if (user.provider !== provider) {\n        throw new HttpException(\n          `이미 ${user.provider}에 연동되어 있는 계정입니다.`,\n          HttpStatus.CONFLICT,\n        );\n      }\n\n      done(null, user);\n    } catch (e) {\n      if (e.status === 404) {\n        const newUser = await this.userService.createUser({\n          provider,\n          username: displayName,\n          email,\n          profileImg: profile_image,\n        });\n\n        done(null, newUser);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'entities/Product.html': {
      url: 'entities/Product.html',
      title: 'entity - Product',
      body: '\n                   \n\n\n\n\n\n\n\n  Entities\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/entities/product.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                category\n                            \n                            \n                                    \n                                    Public\n                                description\n                            \n                            \n                                    \n                                    Public\n                                name\n                            \n                            \n                                    \n                                    Public\n                                price\n                            \n                            \n                                    \n                                    Public\n                                productImg\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        productImg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from \'typeorm\';\nimport { BaseEntity } from \'@product/entities/base.entity\';\n\n@Entity()\nexport class Product extends BaseEntity {\n  @Column({ unique: true })\n  public name: string;\n\n  @Column()\n  public price: number;\n\n  @Column()\n  public description: string;\n\n  @Column()\n  public category: string;\n\n  @Column()\n  public productImg: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'controllers/ProductController.html': {
      url: 'controllers/ProductController.html',
      title: 'controller - ProductController',
      body: "\n                   \n\n\n\n\n\n\n  Controllers\n  ProductController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/product.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                product\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    Async\n                                getProductById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')@ApiBody({type: CreateProductDto})\n                \n            \n\n                    \n                        \n                            Defined in src/product/product.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/product/product.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/all')\n                \n            \n\n                    \n                        \n                            Defined in src/product/product.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProductById(productId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:productId')\n                \n            \n\n                    \n                        \n                            Defined in src/product/product.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, dto: UpdateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id')@ApiBody({type: CreateProductDto})\n                \n            \n\n                    \n                        \n                            Defined in src/product/product.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport { ProductService } from '@product/product.service';\nimport { CreateProductDto } from '@product/dto/create-product.dto';\nimport { UpdateProductDto } from '@product/dto/update-product.dto';\nimport { ApiBody, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('product')\n@Controller('product')\nexport class ProductController {\n  constructor(private readonly productService: ProductService) {}\n\n  // 전체 데이터 api\n  @Get('/all')\n  async getAll() {\n    return await this.productService.getAll();\n  }\n\n  // 상세 데이터 api\n  @Get('/:productId')\n  async getProductById(@Param('productId') productId: string) {\n    return await this.productService.getProductById(productId);\n  }\n\n  // 등록 api\n  @Post('/create')\n  @ApiBody({ type: CreateProductDto })\n  async create(@Body() dto: CreateProductDto) {\n    return await this.productService.create(dto);\n  }\n\n  // 삭제 api\n  @Delete('/:id')\n  async delete(@Param('id') id: string) {\n    return await this.productService.delete(id);\n  }\n\n  // 수정 api\n  @Put('/:id')\n  @ApiBody({ type: CreateProductDto })\n  async update(@Param('id') id: string, @Body() dto: UpdateProductDto) {\n    return await this.productService.update(id, dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'modules/ProductModule.html': {
      url: 'modules/ProductModule.html',
      title: 'module - ProductModule',
      body: "\n                   \n\n\n\n\n    Modules\n    ProductModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\n\nProductService\n\nProductService\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/product/product.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Product } from '@product/entities/product.entity';\nimport { ProductController } from '@product/product.controller';\nimport { ProductService } from '@product/product.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Product])],\n  controllers: [ProductController],\n  providers: [ProductService],\n})\nexport class ProductModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/ProductService.html': {
      url: 'injectables/ProductService.html',
      title: 'injectable - ProductService',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/product.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getProductById\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/product/product.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/product/product.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/product/product.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/product/product.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProductById(productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/product/product.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, dto: UpdateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/product/product.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Product } from '@product/entities/product.entity';\nimport { CreateProductDto } from '@product/dto/create-product.dto';\nimport { UpdateProductDto } from '@product/dto/update-product.dto';\n\n@Injectable()\nexport class ProductService {\n  constructor(\n    @InjectRepository(Product)\n    private repository: Repository,\n  ) {}\n\n  // 전체 데이터 로직\n  async getAll() {\n    return this.repository.find();\n  }\n\n  // 상세 데이터 로직\n  async getProductById(productId: string) {\n    const product = await this.repository.findOneBy({ id: productId });\n\n    if (!product) {\n      throw new NotFoundException('제품을 찾을 수 없습니다.');\n    }\n\n    return product;\n  }\n\n  // 등록 로직\n  async create(dto: CreateProductDto) {\n    const product = await this.repository.create(dto);\n    await this.repository.save(product);\n\n    return product;\n  }\n\n  // 삭제 로직\n  async delete(id: string) {\n    const product = await this.repository.delete(id);\n\n    if (!product) {\n      throw new NotFoundException('제품을 찾을 수 없습니다.');\n    }\n\n    return product;\n  }\n\n  // 수정 로직\n  async update(id: string, dto: UpdateProductDto) {\n    const product = await this.repository.update(id, dto);\n\n    if (!product) {\n      throw new NotFoundException('제품을 찾을 수 없습니다.');\n    }\n\n    return product;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'modules/RedisModule.html': {
      url: 'modules/RedisModule.html',
      title: 'module - RedisModule',
      body: "\n                   \n\n\n\n\n    Modules\n    RedisModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CacheModule } from '@nestjs/common/cache';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as redisStore from 'cache-manager-redis-store';\n\n@Module({\n  imports: [\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          store: redisStore,\n          host: configService.get('REDIS_HOST'),\n          port: configService.get('REDIS_PORT'),\n          ttl: configService.get('REDIS_TTL'),\n        };\n      },\n      isGlobal: true,\n    }),\n  ],\n})\nexport class RedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'interfaces/RequestUserInterface.html': {
      url: 'interfaces/RequestUserInterface.html',
      title: 'interface - RequestUserInterface',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestUserInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interface/requestUser.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { User } from \'@user/entities/user.entity\';\n\nexport interface RequestUserInterface extends Request {\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'injectables/TokenGuard.html': {
      url: 'injectables/TokenGuard.html',
      title: 'injectable - TokenGuard',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/token.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class TokenGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'interfaces/TokenInterface.html': {
      url: 'interfaces/TokenInterface.html',
      title: 'interface - TokenInterface',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interface/token.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenInterface {\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'injectables/TokenStrategy.html': {
      url: 'injectables/TokenStrategy.html',
      title: 'injectable - TokenStrategy',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/token.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/token.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(load: TokenInterface)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategy/token.strategy.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                load\n                                            \n                                                            TokenInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { UserService } from '@user/user.service';\nimport { TokenInterface } from '@auth/interface/token.interface';\n\n@Injectable()\nexport class TokenStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UserService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: configService.get('TOKEN_SECRET'),\n    });\n  }\n\n  // 검증 로직\n  async validate(load: TokenInterface) {\n    return await this.userService.getUserBy('id', load.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'classes/UpdateAuthDto.html': {
      url: 'classes/UpdateAuthDto.html',
      title: 'class - UpdateAuthDto',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-auth.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateAuthDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \'@nestjs/mapped-types\';\nimport { CreateAuthDto } from \'@auth/dto/create-auth.dto\';\n\nexport class UpdateAuthDto extends PartialType(CreateAuthDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/UpdateProductDto.html': {
      url: 'classes/UpdateProductDto.html',
      title: 'class - UpdateProductDto',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/dto/update-product.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateProductDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \'@nestjs/mapped-types\';\nimport { CreateProductDto } from \'@product/dto/create-product.dto\';\n\nexport class UpdateProductDto extends PartialType(CreateProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/UpdateUserDto.html': {
      url: 'classes/UpdateUserDto.html',
      title: 'class - UpdateUserDto',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \'@nestjs/mapped-types\';\nimport { CreateUserDto } from \'@user/dto/create-user.dto\';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'entities/User.html': {
      url: 'entities/User.html',
      title: 'entity - User',
      body: "\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                email\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                grade\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                profileImg\n                            \n                            \n                                    \n                                    Public\n                                provider\n                            \n                            \n                                    \n                                    Public\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        grade\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        profileImg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Provider\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Provider, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BeforeInsert, Column, Entity } from 'typeorm';\nimport * as bcrypt from 'bcryptjs';\nimport * as gravatar from 'gravatar';\nimport { BaseEntity } from '@product/entities/base.entity';\nimport { Exclude } from 'class-transformer';\nimport { Provider } from '@user/entities/provider.enum';\n\n@Entity()\nexport class User extends BaseEntity {\n  @Column()\n  public username: string;\n\n  @Column({ nullable: true })\n  @Exclude()\n  public password?: string;\n\n  @Column({ unique: true })\n  public email: string;\n\n  @Column({ nullable: true })\n  public phone?: number;\n\n  @Column({ nullable: true })\n  public grade?: string;\n\n  @Column({ nullable: true })\n  public profileImg?: string;\n\n  @Column({ type: 'enum', enum: Provider, default: Provider.LOCAL })\n  public provider: Provider;\n\n  @BeforeInsert()\n  async beforeSave() {\n    try {\n      // provider가 local일 경우에만 사용\n      if (this.provider !== Provider.LOCAL) {\n        return;\n      } else {\n        // 패스워드 암호화\n        const saltValue = await bcrypt.genSalt(10);\n        this.password = await bcrypt.hash(this.password, saltValue);\n\n        // 프로필 사진 자동생성\n        await gravatar.url(this.profileImg, {\n          s: '200',\n          r: 'pg',\n          d: 'mm',\n          protocol: 'https',\n        });\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'controllers/UserController.html': {
      url: 'controllers/UserController.html',
      title: 'controller - UserController',
      body: "\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { UserService } from '@user/user.service';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'modules/UserModule.html': {
      url: 'modules/UserModule.html',
      title: 'module - UserModule',
      body: "\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserController } from '@user/user.controller';\nimport { UserService } from '@user/user.service';\nimport { User } from '@user/entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/UserService.html': {
      url: 'injectables/UserService.html',
      title: 'injectable - UserService',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                getUserBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(dto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserBy\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserBy(key: \"id\" | \"email\", value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        \"id\" | \"email\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '@user/entities/user.entity';\nimport { CreateUserDto } from '@user/dto/create-user.dto';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User)\n    private repository: Repository,\n  ) {}\n\n  // 회원 등록 로직\n  async createUser(dto: CreateUserDto) {\n    const user = this.repository.create(dto);\n    await this.repository.save(user);\n\n    return user;\n  }\n\n  // 회원의 id나 email을 통해 정보 가져오는 로직\n  async getUserBy(key: 'id' | 'email', value: string) {\n    const user = await this.repository.findOneBy({ [key]: value });\n\n    if (user) {\n      return user;\n    }\n\n    throw new NotFoundException(`유저의 ${key} 가 존재하지 않습니다.`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'coverage.html': {
      url: 'coverage.html',
      title: 'coverage - coverage',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/dto/create-auth.dto.ts\n            \n            class\n            CreateAuthDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/update-auth.dto.ts\n            \n            class\n            UpdateAuthDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/entities/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/google-auth.guard.ts\n            \n            injectable\n            GoogleAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/kakao-auth.guard.ts\n            \n            injectable\n            KakaoAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/naver-auth.guard.ts\n            \n            injectable\n            NaverAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/token.guard.ts\n            \n            injectable\n            TokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/interface/requestUser.interface.ts\n            \n            interface\n            RequestUserInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/interface/token.interface.ts\n            \n            interface\n            TokenInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/strategy/google-auth.strategy.ts\n            \n            injectable\n            GoogleAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/kakao-auth.strategy.ts\n            \n            injectable\n            KakaoAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/local-auth.strategy.ts\n            \n            injectable\n            LocalAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/naver-auth.strategy.ts\n            \n            injectable\n            NaverAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/token.strategy.ts\n            \n            injectable\n            TokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/product/dto/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/product/dto/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/product/entities/base.entity.ts\n            \n            class\n            BaseEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/product/entities/product.entity.ts\n            \n            entity\n            Product\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/product/product.controller.ts\n            \n            controller\n            ProductController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/product/product.service.ts\n            \n            injectable\n            ProductService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById(\'coverage-table\'));\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'dependencies.html': {
      url: 'dependencies.html',
      title: 'package-dependencies - dependencies',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.2\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            @types/bcryptjs : ^2.4.6\n        \n            @types/cookie-parser : ^1.4.7\n        \n            @types/gravatar : ^1.8.6\n        \n            @types/hapi__joi : ^17.1.14\n        \n            @types/nodemailer : ^6.4.16\n        \n            @types/passport-google-oauth2 : ^0.1.10\n        \n            @types/passport-jwt : ^4.0.1\n        \n            @types/passport-kakao : ^1.0.3\n        \n            @types/passport-local : ^1.0.38\n        \n            @types/passport-naver : ^1.0.4\n        \n            bcryptjs : ^2.4.3\n        \n            cache-manager : ^4.1.0\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cookie-parser : ^1.4.7\n        \n            gravatar : ^1.8.2\n        \n            nodemailer : ^6.9.15\n        \n            passport : ^0.7.0\n        \n            passport-google-oauth2 : ^0.2.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-kakao : ^1.0.1\n        \n            passport-local : ^1.0.0\n        \n            passport-naver : ^1.0.6\n        \n            pg : ^8.13.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'miscellaneous/enumerations.html': {
      url: 'miscellaneous/enumerations.html',
      title: 'miscellaneous-enumerations - enumerations',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Provider   (src/.../provider.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/entities/provider.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Provider\n                    \n                \n                        \n                            \n                                 LOCAL\n                            \n                        \n                        \n                            \n                                Value : local\n                            \n                        \n                        \n                            \n                                 GOOGLE\n                            \n                        \n                        \n                            \n                                Value : google\n                            \n                        \n                        \n                            \n                                 KAKAO\n                            \n                        \n                        \n                            \n                                Value : kakao\n                            \n                        \n                        \n                            \n                                 NAVER\n                            \n                        \n                        \n                            \n                                Value : naver\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'miscellaneous/functions.html': {
      url: 'miscellaneous/functions.html',
      title: 'miscellaneous-functions - functions',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'index.html': {
      url: 'index.html',
      title: 'getting-started - index',
      body: '\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you\'d like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'modules.html': {
      url: 'modules.html',
      title: 'modules - modules',
      body: '\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DbModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'overview.html': {
      url: 'overview.html',
      title: 'overview - overview',
      body: '\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDbModule\n\nDbModule\n\nAppModule -->\n\nDbModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAuthModule -->\n\nEmailModule->AuthModule\n\n\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleAuthStrategy\n\nGoogleAuthStrategy\n\nAuthModule -->\n\nGoogleAuthStrategy->AuthModule\n\n\n\n\n\nKakaoAuthStrategy\n\nKakaoAuthStrategy\n\nAuthModule -->\n\nKakaoAuthStrategy->AuthModule\n\n\n\n\n\nLocalAuthStrategy\n\nLocalAuthStrategy\n\nAuthModule -->\n\nLocalAuthStrategy->AuthModule\n\n\n\n\n\nNaverAuthStrategy\n\nNaverAuthStrategy\n\nAuthModule -->\n\nNaverAuthStrategy->AuthModule\n\n\n\n\n\nTokenStrategy\n\nTokenStrategy\n\nAuthModule -->\n\nTokenStrategy->AuthModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    15 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'properties.html': {
      url: 'properties.html',
      title: 'package-properties - properties',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
  },
};
